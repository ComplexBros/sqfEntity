// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'orm_models.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:User.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// User TABLE
class TableUser extends SqfEntityTableBase {
  TableUser() {
    // declare properties of EntityTable
    tableName = 'users';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('email', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('name', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('phone', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('password', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('dob', DbType.date,
          isUnique: false,
          isNotNull: false,
          isIndex: false,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('longitude', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('latitude', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('category', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('created_at', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableUser();
  }
}

// Transaction TABLE
class TableTransaction extends SqfEntityTableBase {
  TableTransaction() {
    // declare properties of EntityTable
    tableName = 'transactions';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('customer_id', DbType.integer,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('transaction_type', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('phone', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('password', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('dob', DbType.date,
          isUnique: false,
          isNotNull: false,
          isIndex: false,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('longitude', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('latitude', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('category', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTransaction();
  }
}

// Transactionsdetail TABLE
class TableTransactionsdetail extends SqfEntityTableBase {
  TableTransactionsdetail() {
    // declare properties of EntityTable
    tableName = 'transactionsdetails';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('item_id', DbType.integer,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('quantity', DbType.integer,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('price', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('created_at', DbType.date,
          isUnique: false,
          isNotNull: false,
          isIndex: false,
          minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTransactionsdetail();
  }
}

// Collection TABLE
class TableCollection extends SqfEntityTableBase {
  TableCollection() {
    // declare properties of EntityTable
    tableName = 'collections';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('amount', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('customer_id', DbType.integer,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('created_at', DbType.date,
          isUnique: false,
          isNotNull: false,
          isIndex: false,
          minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableCollection();
  }
}

// Item TABLE
class TableItem extends SqfEntityTableBase {
  TableItem() {
    // declare properties of EntityTable
    tableName = 'items';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('item_name', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('barcode', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('price1', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('price2', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('price3', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('created_at', DbType.date,
          isUnique: false,
          isNotNull: false,
          isIndex: false,
          minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableItem();
  }
}

// Customer TABLE
class TableCustomer extends SqfEntityTableBase {
  TableCustomer() {
    // declare properties of EntityTable
    tableName = 'customers';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('customer_name', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('phone', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('address', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('created_at', DbType.date,
          isUnique: false,
          isNotNull: false,
          isIndex: false,
          minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableCustomer();
  }
}

// Itemsimage TABLE
class TableItemsimage extends SqfEntityTableBase {
  TableItemsimage() {
    // declare properties of EntityTable
    tableName = 'itemsimages';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('item_id', DbType.integer,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('image', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableItemsimage();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class MyDbModel extends SqfEntityModelProvider {
  MyDbModel() {
    databaseName = myDbModel.databaseName;
    password = myDbModel.password;
    dbVersion = myDbModel.dbVersion;
    databaseTables = [
      TableUser.getInstance,
      TableTransaction.getInstance,
      TableTransactionsdetail.getInstance,
      TableCollection.getInstance,
      TableItem.getInstance,
      TableCustomer.getInstance,
      TableItemsimage.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};
    controllers['users'] = UserController.getController;
    controllers['transactions'] = TransactionController.getController;
    controllers['transactionsdetails'] =
        TransactionsdetailController.getController;
    controllers['collections'] = CollectionController.getController;
    controllers['items'] = ItemController.getController;
    controllers['customers'] = CustomerController.getController;
    controllers['itemsimages'] = ItemsimageController.getController;

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region User
class User {
  User(
      {this.id,
      this.email,
      this.name,
      this.phone,
      this.password,
      this.dob,
      this.longitude,
      this.latitude,
      this.category,
      this.created_at,
      this.isDeleted}) {
    _setDefaultValues();
  }
  User.withFields(
      this.id,
      this.email,
      this.name,
      this.phone,
      this.password,
      this.dob,
      this.longitude,
      this.latitude,
      this.category,
      this.created_at,
      this.isDeleted) {
    _setDefaultValues();
  }
  User.withId(
      this.id,
      this.email,
      this.name,
      this.phone,
      this.password,
      this.dob,
      this.longitude,
      this.latitude,
      this.category,
      this.created_at,
      this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  User.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['email'] != null) {
      email = o['email'].toString();
    }
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['phone'] != null) {
      phone = o['phone'].toString();
    }
    if (o['password'] != null) {
      password = o['password'].toString();
    }
    if (o['dob'] != null) {
      dob = int.tryParse(o['dob'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dob'].toString())!)
          : DateTime.tryParse(o['dob'].toString());
    }
    if (o['longitude'] != null) {
      longitude = o['longitude'].toString();
    }
    if (o['latitude'] != null) {
      latitude = o['latitude'].toString();
    }
    if (o['category'] != null) {
      category = o['category'].toString();
    }
    if (o['created_at'] != null) {
      created_at = o['created_at'].toString();
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    isSaved = true;
  }
  // FIELDS (User)
  int? id;
  String? email;
  String? name;
  String? phone;
  String? password;
  DateTime? dob;
  String? longitude;
  String? latitude;
  String? category;
  String? created_at;
  bool? isDeleted;
  bool? isSaved;
  BoolResult? saveResult;
  // end FIELDS (User)

  static const bool _softDeleteActivated = true;
  UserManager? __mnUser;

  UserManager get _mnUser {
    return __mnUser = __mnUser ?? UserManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (email != null) {
      map['email'] = email;
    }

    if (name != null) {
      map['name'] = name;
    }

    if (phone != null) {
      map['phone'] = phone;
    }

    if (password != null) {
      map['password'] = password;
    }

    if (dob != null) {
      map['dob'] = forJson
          ? '$dob!.year-$dob!.month-$dob!.day'
          : forQuery
              ? DateTime(dob!.year, dob!.month, dob!.day).millisecondsSinceEpoch
              : dob;
    }

    if (longitude != null) {
      map['longitude'] = longitude;
    }

    if (latitude != null) {
      map['latitude'] = latitude;
    }

    if (category != null) {
      map['category'] = category;
    }

    if (created_at != null) {
      map['created_at'] = created_at;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (email != null) {
      map['email'] = email;
    }

    if (name != null) {
      map['name'] = name;
    }

    if (phone != null) {
      map['phone'] = phone;
    }

    if (password != null) {
      map['password'] = password;
    }

    if (dob != null) {
      map['dob'] = forJson
          ? '$dob!.year-$dob!.month-$dob!.day'
          : forQuery
              ? DateTime(dob!.year, dob!.month, dob!.day).millisecondsSinceEpoch
              : dob;
    }

    if (longitude != null) {
      map['longitude'] = longitude;
    }

    if (latitude != null) {
      map['latitude'] = latitude;
    }

    if (category != null) {
      map['category'] = category;
    }

    if (created_at != null) {
      map['created_at'] = created_at;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [User]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [User]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      id,
      email,
      name,
      phone,
      password,
      dob != null ? dob!.millisecondsSinceEpoch : null,
      longitude,
      latitude,
      category,
      created_at,
      isDeleted
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      id,
      email,
      name,
      phone,
      password,
      dob != null ? dob!.millisecondsSinceEpoch : null,
      longitude,
      latitude,
      category,
      created_at,
      isDeleted
    ];
  }

  static Future<List<User>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR User.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<User>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <User>[];
    try {
      objList = list
          .map((user) => User.fromMap(user as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR User.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<User>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<User> objList = <User>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = User.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns User by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns User if exist, otherwise returns null
  Future<User?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    User? obj;
    final data = await _mnUser.getById([id]);
    if (data.length != 0) {
      obj = User.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (User) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnUser.insert(this);
      if (saveResult!.success) {
        isSaved = true;
      }
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnUser.update(this);
    }

    return id;
  }

  /// saveAll method saves the sent List<User> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<User> users) async {
    // final results = _mnUser.saveAll('INSERT OR REPLACE INTO users (id,email, name, phone, password, dob, longitude, latitude, category, created_at,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',users);
    // return results; removed in sqfentity_gen 1.3.0+6
    await MyDbModel().batchStart();
    for (final obj in users) {
      await obj.save();
    }
    //    return MyDbModel().batchCommit();
    final result = await MyDbModel().batchCommit();

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int?> upsert() async {
    try {
      final result = await _mnUser.rawInsert(
          'INSERT OR REPLACE INTO users (id,email, name, phone, password, dob, longitude, latitude, category, created_at,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            email,
            name,
            phone,
            password,
            dob != null ? dob!.millisecondsSinceEpoch : null,
            longitude,
            latitude,
            category,
            created_at,
            isDeleted
          ]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true, successMessage: 'User id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'User id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'User Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<User>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<User> users) async {
    final results = await _mnUser.rawInsertAll(
        'INSERT OR REPLACE INTO users (id,email, name, phone, password, dob, longitude, latitude, category, created_at,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
        users);
    return results;
  }

  /// Deletes User

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete User invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnUser
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnUser.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover User>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover User invoked (id=$id)');
    {
      return _mnUser.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  UserFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return UserFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  UserFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return UserFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion user

// region UserField
class UserField extends SearchCriteria {
  UserField(this.userFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  UserFilterBuilder userFB;

  UserField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  UserFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    userFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userFB.parameters, param, SqlSyntax.EQuals,
            userFB._addedBlocks)
        : setCriteria(pValue, userFB.parameters, param, SqlSyntax.NotEQuals,
            userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    userFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userFB.parameters, param, SqlSyntax.EQualsOrNull,
            userFB._addedBlocks)
        : setCriteria(pValue, userFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder isNull() {
    userFB._addedBlocks = setCriteria(
        0,
        userFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      userFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          userFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          userFB._addedBlocks);
      _waitingNot = '';
      userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
          userFB._addedBlocks.retVal;
    }
    return userFB;
  }

  UserFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      userFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          userFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          userFB._addedBlocks);
      _waitingNot = '';
      userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
          userFB._addedBlocks.retVal;
      userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
          userFB._addedBlocks.retVal;
    }
    return userFB;
  }

  UserFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      userFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          userFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          userFB._addedBlocks);
      _waitingNot = '';
      userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
          userFB._addedBlocks.retVal;
    }
    return userFB;
  }

  UserFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      userFB._addedBlocks = setCriteria(
          pFirst,
          userFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          userFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        userFB._addedBlocks = setCriteria(pFirst, userFB.parameters, param,
            SqlSyntax.LessThan, userFB._addedBlocks);
      } else {
        userFB._addedBlocks = setCriteria(pFirst, userFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, userFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        userFB._addedBlocks = setCriteria(pLast, userFB.parameters, param,
            SqlSyntax.GreaterThan, userFB._addedBlocks);
      } else {
        userFB._addedBlocks = setCriteria(pLast, userFB.parameters, param,
            SqlSyntax.LessThanOrEquals, userFB._addedBlocks);
      }
    }
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    userFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userFB.parameters, param, SqlSyntax.GreaterThan,
            userFB._addedBlocks)
        : setCriteria(pValue, userFB.parameters, param,
            SqlSyntax.LessThanOrEquals, userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    userFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userFB.parameters, param, SqlSyntax.LessThan,
            userFB._addedBlocks)
        : setCriteria(pValue, userFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    userFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, userFB._addedBlocks)
        : setCriteria(pValue, userFB.parameters, param, SqlSyntax.LessThan,
            userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    userFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userFB.parameters, param,
            SqlSyntax.LessThanOrEquals, userFB._addedBlocks)
        : setCriteria(pValue, userFB.parameters, param, SqlSyntax.GreaterThan,
            userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder inValues(dynamic pValue) {
    userFB._addedBlocks = setCriteria(
        pValue,
        userFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }
}
// endregion UserField

// region UserFilterBuilder
class UserFilterBuilder extends SearchCriteria {
  UserFilterBuilder(User obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  User? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  UserFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  UserFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  UserFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  UserFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  UserFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  UserFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  UserFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  UserFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  UserFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  UserFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  UserFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  UserField setField(UserField? field, String colName, DbType dbtype) {
    return UserField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  UserField? _id;
  UserField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  UserField? _email;
  UserField get email {
    return _email = setField(_email, 'email', DbType.text);
  }

  UserField? _name;
  UserField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  UserField? _phone;
  UserField get phone {
    return _phone = setField(_phone, 'phone', DbType.text);
  }

  UserField? _password;
  UserField get password {
    return _password = setField(_password, 'password', DbType.text);
  }

  UserField? _dob;
  UserField get dob {
    return _dob = setField(_dob, 'dob', DbType.date);
  }

  UserField? _longitude;
  UserField get longitude {
    return _longitude = setField(_longitude, 'longitude', DbType.text);
  }

  UserField? _latitude;
  UserField get latitude {
    return _latitude = setField(_latitude, 'latitude', DbType.text);
  }

  UserField? _category;
  UserField get category {
    return _category = setField(_category, 'category', DbType.text);
  }

  UserField? _created_at;
  UserField get created_at {
    return _created_at = setField(_created_at, 'created_at', DbType.text);
  }

  UserField? _isDeleted;
  UserField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (User._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<User> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);

    if (User._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnUser.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnUser.delete(qparams);
    }
    return r;
  }

  /// Recover List<User> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover User bulk invoked');
    return _obj!._mnUser.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from users ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnUser.updateBatch(qparams, values);
  }

  /// This method always returns User Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<User>
  Future<User?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnUser.toList(qparams);
    final data = await objFuture;
    User? obj;
    if (data.isNotEmpty) {
      obj = User.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [User]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c)? userCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final usersFuture = await _obj!._mnUser.toList(qparams);
    final int count = usersFuture[0]['CNT'] as int;
    if (userCount != null) {
      userCount(count);
    }
    return count;
  }

  /// This method returns List<User> [User]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<User>
  Future<List<User>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<User> usersData = await User.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return usersData;
  }

  /// This method returns Json String [User]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [User]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [User]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnUser.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<User>>
  Future<List<DropdownMenuItem<User>>> toDropDownMenu(String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<User>> o)?
          dropDownMenu]) async {
    _buildParameters();
    final usersFuture = _obj!._mnUser.toList(qparams);

    final data = await usersFuture;
    final int count = data.length;
    final List<DropdownMenuItem<User>> items = []..add(DropdownMenuItem(
        value: User(),
        child: Text('Select User'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: User.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)?
          dropDownMenu]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final usersFuture = _obj!._mnUser.toList(qparams);

    final data = await usersFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('Select User'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [User]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM users WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnUser.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [User]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnUser.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await User.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnUser.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion UserFilterBuilder

// region UserFields
class UserFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fEmail;
  static TableField get email {
    return _fEmail =
        _fEmail ?? SqlSyntax.setField(_fEmail, 'email', DbType.text);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fPhone;
  static TableField get phone {
    return _fPhone =
        _fPhone ?? SqlSyntax.setField(_fPhone, 'phone', DbType.text);
  }

  static TableField? _fPassword;
  static TableField get password {
    return _fPassword =
        _fPassword ?? SqlSyntax.setField(_fPassword, 'password', DbType.text);
  }

  static TableField? _fDob;
  static TableField get dob {
    return _fDob = _fDob ?? SqlSyntax.setField(_fDob, 'dob', DbType.date);
  }

  static TableField? _fLongitude;
  static TableField get longitude {
    return _fLongitude = _fLongitude ??
        SqlSyntax.setField(_fLongitude, 'longitude', DbType.text);
  }

  static TableField? _fLatitude;
  static TableField get latitude {
    return _fLatitude =
        _fLatitude ?? SqlSyntax.setField(_fLatitude, 'latitude', DbType.text);
  }

  static TableField? _fCategory;
  static TableField get category {
    return _fCategory =
        _fCategory ?? SqlSyntax.setField(_fCategory, 'category', DbType.text);
  }

  static TableField? _fCreated_at;
  static TableField get created_at {
    return _fCreated_at = _fCreated_at ??
        SqlSyntax.setField(_fCreated_at, 'created_at', DbType.text);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion UserFields

//region UserManager
class UserManager extends SqfEntityProvider {
  UserManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'users';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion UserManager
// region Transaction
class Transaction {
  Transaction(
      {this.id,
      this.customer_id,
      this.transaction_type,
      this.phone,
      this.password,
      this.dob,
      this.longitude,
      this.latitude,
      this.category,
      this.isDeleted}) {
    _setDefaultValues();
  }
  Transaction.withFields(
      this.id,
      this.customer_id,
      this.transaction_type,
      this.phone,
      this.password,
      this.dob,
      this.longitude,
      this.latitude,
      this.category,
      this.isDeleted) {
    _setDefaultValues();
  }
  Transaction.withId(
      this.id,
      this.customer_id,
      this.transaction_type,
      this.phone,
      this.password,
      this.dob,
      this.longitude,
      this.latitude,
      this.category,
      this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Transaction.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['customer_id'] != null) {
      customer_id = int.tryParse(o['customer_id'].toString());
    }
    if (o['transaction_type'] != null) {
      transaction_type = o['transaction_type'].toString();
    }
    if (o['phone'] != null) {
      phone = o['phone'].toString();
    }
    if (o['password'] != null) {
      password = o['password'].toString();
    }
    if (o['dob'] != null) {
      dob = int.tryParse(o['dob'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dob'].toString())!)
          : DateTime.tryParse(o['dob'].toString());
    }
    if (o['longitude'] != null) {
      longitude = o['longitude'].toString();
    }
    if (o['latitude'] != null) {
      latitude = o['latitude'].toString();
    }
    if (o['category'] != null) {
      category = o['category'].toString();
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    isSaved = true;
  }
  // FIELDS (Transaction)
  int? id;
  int? customer_id;
  String? transaction_type;
  String? phone;
  String? password;
  DateTime? dob;
  String? longitude;
  String? latitude;
  String? category;
  bool? isDeleted;
  bool? isSaved;
  BoolResult? saveResult;
  // end FIELDS (Transaction)

  static const bool _softDeleteActivated = true;
  TransactionManager? __mnTransaction;

  TransactionManager get _mnTransaction {
    return __mnTransaction = __mnTransaction ?? TransactionManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (customer_id != null) {
      map['customer_id'] = customer_id;
    }

    if (transaction_type != null) {
      map['transaction_type'] = transaction_type;
    }

    if (phone != null) {
      map['phone'] = phone;
    }

    if (password != null) {
      map['password'] = password;
    }

    if (dob != null) {
      map['dob'] = forJson
          ? '$dob!.year-$dob!.month-$dob!.day'
          : forQuery
              ? DateTime(dob!.year, dob!.month, dob!.day).millisecondsSinceEpoch
              : dob;
    }

    if (longitude != null) {
      map['longitude'] = longitude;
    }

    if (latitude != null) {
      map['latitude'] = latitude;
    }

    if (category != null) {
      map['category'] = category;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (customer_id != null) {
      map['customer_id'] = customer_id;
    }

    if (transaction_type != null) {
      map['transaction_type'] = transaction_type;
    }

    if (phone != null) {
      map['phone'] = phone;
    }

    if (password != null) {
      map['password'] = password;
    }

    if (dob != null) {
      map['dob'] = forJson
          ? '$dob!.year-$dob!.month-$dob!.day'
          : forQuery
              ? DateTime(dob!.year, dob!.month, dob!.day).millisecondsSinceEpoch
              : dob;
    }

    if (longitude != null) {
      map['longitude'] = longitude;
    }

    if (latitude != null) {
      map['latitude'] = latitude;
    }

    if (category != null) {
      map['category'] = category;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Transaction]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Transaction]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      id,
      customer_id,
      transaction_type,
      phone,
      password,
      dob != null ? dob!.millisecondsSinceEpoch : null,
      longitude,
      latitude,
      category,
      isDeleted
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      id,
      customer_id,
      transaction_type,
      phone,
      password,
      dob != null ? dob!.millisecondsSinceEpoch : null,
      longitude,
      latitude,
      category,
      isDeleted
    ];
  }

  static Future<List<Transaction>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Transaction.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Transaction>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Transaction>[];
    try {
      objList = list
          .map((transaction) =>
              Transaction.fromMap(transaction as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR Transaction.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Transaction>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Transaction> objList = <Transaction>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Transaction.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Transaction by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Transaction if exist, otherwise returns null
  Future<Transaction?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Transaction? obj;
    final data = await _mnTransaction.getById([id]);
    if (data.length != 0) {
      obj = Transaction.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Transaction) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnTransaction.insert(this);
      if (saveResult!.success) {
        isSaved = true;
      }
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnTransaction.update(this);
    }

    return id;
  }

  /// saveAll method saves the sent List<Transaction> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Transaction> transactions) async {
    // final results = _mnTransaction.saveAll('INSERT OR REPLACE INTO transactions (id,customer_id, transaction_type, phone, password, dob, longitude, latitude, category,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?)',transactions);
    // return results; removed in sqfentity_gen 1.3.0+6
    await MyDbModel().batchStart();
    for (final obj in transactions) {
      await obj.save();
    }
    //    return MyDbModel().batchCommit();
    final result = await MyDbModel().batchCommit();

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int?> upsert() async {
    try {
      final result = await _mnTransaction.rawInsert(
          'INSERT OR REPLACE INTO transactions (id,customer_id, transaction_type, phone, password, dob, longitude, latitude, category,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            customer_id,
            transaction_type,
            phone,
            password,
            dob != null ? dob!.millisecondsSinceEpoch : null,
            longitude,
            latitude,
            category,
            isDeleted
          ]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Transaction id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Transaction id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Transaction Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Transaction>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Transaction> transactions) async {
    final results = await _mnTransaction.rawInsertAll(
        'INSERT OR REPLACE INTO transactions (id,customer_id, transaction_type, phone, password, dob, longitude, latitude, category,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?)',
        transactions);
    return results;
  }

  /// Deletes Transaction

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Transaction invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnTransaction
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnTransaction.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Transaction>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Transaction invoked (id=$id)');
    {
      return _mnTransaction.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  TransactionFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TransactionFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  TransactionFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TransactionFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion transaction

// region TransactionField
class TransactionField extends SearchCriteria {
  TransactionField(this.transactionFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  TransactionFilterBuilder transactionFB;

  TransactionField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  TransactionFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    transactionFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, transactionFB.parameters, param, SqlSyntax.EQuals,
            transactionFB._addedBlocks)
        : setCriteria(pValue, transactionFB.parameters, param,
            SqlSyntax.NotEQuals, transactionFB._addedBlocks);
    _waitingNot = '';
    transactionFB._addedBlocks.needEndBlock![transactionFB._blockIndex] =
        transactionFB._addedBlocks.retVal;
    return transactionFB;
  }

  TransactionFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    transactionFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, transactionFB.parameters, param,
            SqlSyntax.EQualsOrNull, transactionFB._addedBlocks)
        : setCriteria(pValue, transactionFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, transactionFB._addedBlocks);
    _waitingNot = '';
    transactionFB._addedBlocks.needEndBlock![transactionFB._blockIndex] =
        transactionFB._addedBlocks.retVal;
    return transactionFB;
  }

  TransactionFilterBuilder isNull() {
    transactionFB._addedBlocks = setCriteria(
        0,
        transactionFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        transactionFB._addedBlocks);
    _waitingNot = '';
    transactionFB._addedBlocks.needEndBlock![transactionFB._blockIndex] =
        transactionFB._addedBlocks.retVal;
    return transactionFB;
  }

  TransactionFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      transactionFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          transactionFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          transactionFB._addedBlocks);
      _waitingNot = '';
      transactionFB._addedBlocks.needEndBlock![transactionFB._blockIndex] =
          transactionFB._addedBlocks.retVal;
    }
    return transactionFB;
  }

  TransactionFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      transactionFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          transactionFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          transactionFB._addedBlocks);
      _waitingNot = '';
      transactionFB._addedBlocks.needEndBlock![transactionFB._blockIndex] =
          transactionFB._addedBlocks.retVal;
      transactionFB._addedBlocks.needEndBlock![transactionFB._blockIndex] =
          transactionFB._addedBlocks.retVal;
    }
    return transactionFB;
  }

  TransactionFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      transactionFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          transactionFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          transactionFB._addedBlocks);
      _waitingNot = '';
      transactionFB._addedBlocks.needEndBlock![transactionFB._blockIndex] =
          transactionFB._addedBlocks.retVal;
    }
    return transactionFB;
  }

  TransactionFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      transactionFB._addedBlocks = setCriteria(
          pFirst,
          transactionFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          transactionFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        transactionFB._addedBlocks = setCriteria(
            pFirst,
            transactionFB.parameters,
            param,
            SqlSyntax.LessThan,
            transactionFB._addedBlocks);
      } else {
        transactionFB._addedBlocks = setCriteria(
            pFirst,
            transactionFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            transactionFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        transactionFB._addedBlocks = setCriteria(
            pLast,
            transactionFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            transactionFB._addedBlocks);
      } else {
        transactionFB._addedBlocks = setCriteria(
            pLast,
            transactionFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            transactionFB._addedBlocks);
      }
    }
    _waitingNot = '';
    transactionFB._addedBlocks.needEndBlock![transactionFB._blockIndex] =
        transactionFB._addedBlocks.retVal;
    return transactionFB;
  }

  TransactionFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    transactionFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, transactionFB.parameters, param,
            SqlSyntax.GreaterThan, transactionFB._addedBlocks)
        : setCriteria(pValue, transactionFB.parameters, param,
            SqlSyntax.LessThanOrEquals, transactionFB._addedBlocks);
    _waitingNot = '';
    transactionFB._addedBlocks.needEndBlock![transactionFB._blockIndex] =
        transactionFB._addedBlocks.retVal;
    return transactionFB;
  }

  TransactionFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    transactionFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, transactionFB.parameters, param,
            SqlSyntax.LessThan, transactionFB._addedBlocks)
        : setCriteria(pValue, transactionFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, transactionFB._addedBlocks);
    _waitingNot = '';
    transactionFB._addedBlocks.needEndBlock![transactionFB._blockIndex] =
        transactionFB._addedBlocks.retVal;
    return transactionFB;
  }

  TransactionFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    transactionFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, transactionFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, transactionFB._addedBlocks)
        : setCriteria(pValue, transactionFB.parameters, param,
            SqlSyntax.LessThan, transactionFB._addedBlocks);
    _waitingNot = '';
    transactionFB._addedBlocks.needEndBlock![transactionFB._blockIndex] =
        transactionFB._addedBlocks.retVal;
    return transactionFB;
  }

  TransactionFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    transactionFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, transactionFB.parameters, param,
            SqlSyntax.LessThanOrEquals, transactionFB._addedBlocks)
        : setCriteria(pValue, transactionFB.parameters, param,
            SqlSyntax.GreaterThan, transactionFB._addedBlocks);
    _waitingNot = '';
    transactionFB._addedBlocks.needEndBlock![transactionFB._blockIndex] =
        transactionFB._addedBlocks.retVal;
    return transactionFB;
  }

  TransactionFilterBuilder inValues(dynamic pValue) {
    transactionFB._addedBlocks = setCriteria(
        pValue,
        transactionFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        transactionFB._addedBlocks);
    _waitingNot = '';
    transactionFB._addedBlocks.needEndBlock![transactionFB._blockIndex] =
        transactionFB._addedBlocks.retVal;
    return transactionFB;
  }
}
// endregion TransactionField

// region TransactionFilterBuilder
class TransactionFilterBuilder extends SearchCriteria {
  TransactionFilterBuilder(Transaction obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  Transaction? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  TransactionFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  TransactionFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  TransactionFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  TransactionFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  TransactionFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  TransactionFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  TransactionFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  TransactionFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  TransactionFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  TransactionFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  TransactionFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  TransactionField setField(
      TransactionField? field, String colName, DbType dbtype) {
    return TransactionField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  TransactionField? _id;
  TransactionField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  TransactionField? _customer_id;
  TransactionField get customer_id {
    return _customer_id = setField(_customer_id, 'customer_id', DbType.integer);
  }

  TransactionField? _transaction_type;
  TransactionField get transaction_type {
    return _transaction_type =
        setField(_transaction_type, 'transaction_type', DbType.text);
  }

  TransactionField? _phone;
  TransactionField get phone {
    return _phone = setField(_phone, 'phone', DbType.text);
  }

  TransactionField? _password;
  TransactionField get password {
    return _password = setField(_password, 'password', DbType.text);
  }

  TransactionField? _dob;
  TransactionField get dob {
    return _dob = setField(_dob, 'dob', DbType.date);
  }

  TransactionField? _longitude;
  TransactionField get longitude {
    return _longitude = setField(_longitude, 'longitude', DbType.text);
  }

  TransactionField? _latitude;
  TransactionField get latitude {
    return _latitude = setField(_latitude, 'latitude', DbType.text);
  }

  TransactionField? _category;
  TransactionField get category {
    return _category = setField(_category, 'category', DbType.text);
  }

  TransactionField? _isDeleted;
  TransactionField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Transaction._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Transaction> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);

    if (Transaction._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnTransaction.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnTransaction.delete(qparams);
    }
    return r;
  }

  /// Recover List<Transaction> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Transaction bulk invoked');
    return _obj!._mnTransaction.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from transactions ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnTransaction.updateBatch(qparams, values);
  }

  /// This method always returns Transaction Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Transaction>
  Future<Transaction?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnTransaction.toList(qparams);
    final data = await objFuture;
    Transaction? obj;
    if (data.isNotEmpty) {
      obj = Transaction.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Transaction]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c)? transactionCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final transactionsFuture = await _obj!._mnTransaction.toList(qparams);
    final int count = transactionsFuture[0]['CNT'] as int;
    if (transactionCount != null) {
      transactionCount(count);
    }
    return count;
  }

  /// This method returns List<Transaction> [Transaction]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Transaction>
  Future<List<Transaction>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Transaction> transactionsData = await Transaction.fromMapList(
        data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return transactionsData;
  }

  /// This method returns Json String [Transaction]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Transaction]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Transaction]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnTransaction.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Transaction>>
  Future<List<DropdownMenuItem<Transaction>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<Transaction>> o)?
          dropDownMenu]) async {
    _buildParameters();
    final transactionsFuture = _obj!._mnTransaction.toList(qparams);

    final data = await transactionsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Transaction>> items = []..add(DropdownMenuItem(
        value: Transaction(),
        child: Text('Select Transaction'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Transaction.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)?
          dropDownMenu]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final transactionsFuture = _obj!._mnTransaction.toList(qparams);

    final data = await transactionsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Transaction'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Transaction]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM transactions WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnTransaction.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Transaction]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnTransaction.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Transaction.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnTransaction.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion TransactionFilterBuilder

// region TransactionFields
class TransactionFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fCustomer_id;
  static TableField get customer_id {
    return _fCustomer_id = _fCustomer_id ??
        SqlSyntax.setField(_fCustomer_id, 'customer_id', DbType.integer);
  }

  static TableField? _fTransaction_type;
  static TableField get transaction_type {
    return _fTransaction_type = _fTransaction_type ??
        SqlSyntax.setField(_fTransaction_type, 'transaction_type', DbType.text);
  }

  static TableField? _fPhone;
  static TableField get phone {
    return _fPhone =
        _fPhone ?? SqlSyntax.setField(_fPhone, 'phone', DbType.text);
  }

  static TableField? _fPassword;
  static TableField get password {
    return _fPassword =
        _fPassword ?? SqlSyntax.setField(_fPassword, 'password', DbType.text);
  }

  static TableField? _fDob;
  static TableField get dob {
    return _fDob = _fDob ?? SqlSyntax.setField(_fDob, 'dob', DbType.date);
  }

  static TableField? _fLongitude;
  static TableField get longitude {
    return _fLongitude = _fLongitude ??
        SqlSyntax.setField(_fLongitude, 'longitude', DbType.text);
  }

  static TableField? _fLatitude;
  static TableField get latitude {
    return _fLatitude =
        _fLatitude ?? SqlSyntax.setField(_fLatitude, 'latitude', DbType.text);
  }

  static TableField? _fCategory;
  static TableField get category {
    return _fCategory =
        _fCategory ?? SqlSyntax.setField(_fCategory, 'category', DbType.text);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion TransactionFields

//region TransactionManager
class TransactionManager extends SqfEntityProvider {
  TransactionManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'transactions';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion TransactionManager
// region Transactionsdetail
class Transactionsdetail {
  Transactionsdetail(
      {this.id,
      this.item_id,
      this.quantity,
      this.price,
      this.created_at,
      this.isDeleted}) {
    _setDefaultValues();
  }
  Transactionsdetail.withFields(this.id, this.item_id, this.quantity,
      this.price, this.created_at, this.isDeleted) {
    _setDefaultValues();
  }
  Transactionsdetail.withId(this.id, this.item_id, this.quantity, this.price,
      this.created_at, this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Transactionsdetail.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['item_id'] != null) {
      item_id = int.tryParse(o['item_id'].toString());
    }
    if (o['quantity'] != null) {
      quantity = int.tryParse(o['quantity'].toString());
    }
    if (o['price'] != null) {
      price = o['price'].toString();
    }
    if (o['created_at'] != null) {
      created_at = int.tryParse(o['created_at'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['created_at'].toString())!)
          : DateTime.tryParse(o['created_at'].toString());
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    isSaved = true;
  }
  // FIELDS (Transactionsdetail)
  int? id;
  int? item_id;
  int? quantity;
  String? price;
  DateTime? created_at;
  bool? isDeleted;
  bool? isSaved;
  BoolResult? saveResult;
  // end FIELDS (Transactionsdetail)

  static const bool _softDeleteActivated = true;
  TransactionsdetailManager? __mnTransactionsdetail;

  TransactionsdetailManager get _mnTransactionsdetail {
    return __mnTransactionsdetail =
        __mnTransactionsdetail ?? TransactionsdetailManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (item_id != null) {
      map['item_id'] = item_id;
    }

    if (quantity != null) {
      map['quantity'] = quantity;
    }

    if (price != null) {
      map['price'] = price;
    }

    if (created_at != null) {
      map['created_at'] = forJson
          ? '$created_at!.year-$created_at!.month-$created_at!.day'
          : forQuery
              ? DateTime(created_at!.year, created_at!.month, created_at!.day)
                  .millisecondsSinceEpoch
              : created_at;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (item_id != null) {
      map['item_id'] = item_id;
    }

    if (quantity != null) {
      map['quantity'] = quantity;
    }

    if (price != null) {
      map['price'] = price;
    }

    if (created_at != null) {
      map['created_at'] = forJson
          ? '$created_at!.year-$created_at!.month-$created_at!.day'
          : forQuery
              ? DateTime(created_at!.year, created_at!.month, created_at!.day)
                  .millisecondsSinceEpoch
              : created_at;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Transactionsdetail]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Transactionsdetail]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      id,
      item_id,
      quantity,
      price,
      created_at != null ? created_at!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      id,
      item_id,
      quantity,
      price,
      created_at != null ? created_at!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  static Future<List<Transactionsdetail>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Transactionsdetail.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Transactionsdetail>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Transactionsdetail>[];
    try {
      objList = list
          .map((transactionsdetail) => Transactionsdetail.fromMap(
              transactionsdetail as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR Transactionsdetail.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Transactionsdetail>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Transactionsdetail> objList = <Transactionsdetail>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Transactionsdetail.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Transactionsdetail by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Transactionsdetail if exist, otherwise returns null
  Future<Transactionsdetail?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Transactionsdetail? obj;
    final data = await _mnTransactionsdetail.getById([id]);
    if (data.length != 0) {
      obj = Transactionsdetail.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Transactionsdetail) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnTransactionsdetail.insert(this);
      if (saveResult!.success) {
        isSaved = true;
      }
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnTransactionsdetail.update(this);
    }

    return id;
  }

  /// saveAll method saves the sent List<Transactionsdetail> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<Transactionsdetail> transactionsdetails) async {
    // final results = _mnTransactionsdetail.saveAll('INSERT OR REPLACE INTO transactionsdetails (id,item_id, quantity, price, created_at,isDeleted)  VALUES (?,?,?,?,?,?)',transactionsdetails);
    // return results; removed in sqfentity_gen 1.3.0+6
    await MyDbModel().batchStart();
    for (final obj in transactionsdetails) {
      await obj.save();
    }
    //    return MyDbModel().batchCommit();
    final result = await MyDbModel().batchCommit();

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int?> upsert() async {
    try {
      final result = await _mnTransactionsdetail.rawInsert(
          'INSERT OR REPLACE INTO transactionsdetails (id,item_id, quantity, price, created_at,isDeleted)  VALUES (?,?,?,?,?,?)',
          [
            id,
            item_id,
            quantity,
            price,
            created_at != null ? created_at!.millisecondsSinceEpoch : null,
            isDeleted
          ]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Transactionsdetail id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Transactionsdetail id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage:
              'Transactionsdetail Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Transactionsdetail>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(
      List<Transactionsdetail> transactionsdetails) async {
    final results = await _mnTransactionsdetail.rawInsertAll(
        'INSERT OR REPLACE INTO transactionsdetails (id,item_id, quantity, price, created_at,isDeleted)  VALUES (?,?,?,?,?,?)',
        transactionsdetails);
    return results;
  }

  /// Deletes Transactionsdetail

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Transactionsdetail invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnTransactionsdetail
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnTransactionsdetail.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Transactionsdetail>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Transactionsdetail invoked (id=$id)');
    {
      return _mnTransactionsdetail.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  TransactionsdetailFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TransactionsdetailFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  TransactionsdetailFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TransactionsdetailFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion transactionsdetail

// region TransactionsdetailField
class TransactionsdetailField extends SearchCriteria {
  TransactionsdetailField(this.transactionsdetailFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  TransactionsdetailFilterBuilder transactionsdetailFB;

  TransactionsdetailField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  TransactionsdetailFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    transactionsdetailFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, transactionsdetailFB.parameters, param,
            SqlSyntax.EQuals, transactionsdetailFB._addedBlocks)
        : setCriteria(pValue, transactionsdetailFB.parameters, param,
            SqlSyntax.NotEQuals, transactionsdetailFB._addedBlocks);
    _waitingNot = '';
    transactionsdetailFB
            ._addedBlocks.needEndBlock![transactionsdetailFB._blockIndex] =
        transactionsdetailFB._addedBlocks.retVal;
    return transactionsdetailFB;
  }

  TransactionsdetailFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    transactionsdetailFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, transactionsdetailFB.parameters, param,
            SqlSyntax.EQualsOrNull, transactionsdetailFB._addedBlocks)
        : setCriteria(pValue, transactionsdetailFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, transactionsdetailFB._addedBlocks);
    _waitingNot = '';
    transactionsdetailFB
            ._addedBlocks.needEndBlock![transactionsdetailFB._blockIndex] =
        transactionsdetailFB._addedBlocks.retVal;
    return transactionsdetailFB;
  }

  TransactionsdetailFilterBuilder isNull() {
    transactionsdetailFB._addedBlocks = setCriteria(
        0,
        transactionsdetailFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        transactionsdetailFB._addedBlocks);
    _waitingNot = '';
    transactionsdetailFB
            ._addedBlocks.needEndBlock![transactionsdetailFB._blockIndex] =
        transactionsdetailFB._addedBlocks.retVal;
    return transactionsdetailFB;
  }

  TransactionsdetailFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      transactionsdetailFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          transactionsdetailFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          transactionsdetailFB._addedBlocks);
      _waitingNot = '';
      transactionsdetailFB
              ._addedBlocks.needEndBlock![transactionsdetailFB._blockIndex] =
          transactionsdetailFB._addedBlocks.retVal;
    }
    return transactionsdetailFB;
  }

  TransactionsdetailFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      transactionsdetailFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          transactionsdetailFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          transactionsdetailFB._addedBlocks);
      _waitingNot = '';
      transactionsdetailFB
              ._addedBlocks.needEndBlock![transactionsdetailFB._blockIndex] =
          transactionsdetailFB._addedBlocks.retVal;
      transactionsdetailFB
              ._addedBlocks.needEndBlock![transactionsdetailFB._blockIndex] =
          transactionsdetailFB._addedBlocks.retVal;
    }
    return transactionsdetailFB;
  }

  TransactionsdetailFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      transactionsdetailFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          transactionsdetailFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          transactionsdetailFB._addedBlocks);
      _waitingNot = '';
      transactionsdetailFB
              ._addedBlocks.needEndBlock![transactionsdetailFB._blockIndex] =
          transactionsdetailFB._addedBlocks.retVal;
    }
    return transactionsdetailFB;
  }

  TransactionsdetailFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      transactionsdetailFB._addedBlocks = setCriteria(
          pFirst,
          transactionsdetailFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          transactionsdetailFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        transactionsdetailFB._addedBlocks = setCriteria(
            pFirst,
            transactionsdetailFB.parameters,
            param,
            SqlSyntax.LessThan,
            transactionsdetailFB._addedBlocks);
      } else {
        transactionsdetailFB._addedBlocks = setCriteria(
            pFirst,
            transactionsdetailFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            transactionsdetailFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        transactionsdetailFB._addedBlocks = setCriteria(
            pLast,
            transactionsdetailFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            transactionsdetailFB._addedBlocks);
      } else {
        transactionsdetailFB._addedBlocks = setCriteria(
            pLast,
            transactionsdetailFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            transactionsdetailFB._addedBlocks);
      }
    }
    _waitingNot = '';
    transactionsdetailFB
            ._addedBlocks.needEndBlock![transactionsdetailFB._blockIndex] =
        transactionsdetailFB._addedBlocks.retVal;
    return transactionsdetailFB;
  }

  TransactionsdetailFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    transactionsdetailFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, transactionsdetailFB.parameters, param,
            SqlSyntax.GreaterThan, transactionsdetailFB._addedBlocks)
        : setCriteria(pValue, transactionsdetailFB.parameters, param,
            SqlSyntax.LessThanOrEquals, transactionsdetailFB._addedBlocks);
    _waitingNot = '';
    transactionsdetailFB
            ._addedBlocks.needEndBlock![transactionsdetailFB._blockIndex] =
        transactionsdetailFB._addedBlocks.retVal;
    return transactionsdetailFB;
  }

  TransactionsdetailFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    transactionsdetailFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, transactionsdetailFB.parameters, param,
            SqlSyntax.LessThan, transactionsdetailFB._addedBlocks)
        : setCriteria(pValue, transactionsdetailFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, transactionsdetailFB._addedBlocks);
    _waitingNot = '';
    transactionsdetailFB
            ._addedBlocks.needEndBlock![transactionsdetailFB._blockIndex] =
        transactionsdetailFB._addedBlocks.retVal;
    return transactionsdetailFB;
  }

  TransactionsdetailFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    transactionsdetailFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, transactionsdetailFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, transactionsdetailFB._addedBlocks)
        : setCriteria(pValue, transactionsdetailFB.parameters, param,
            SqlSyntax.LessThan, transactionsdetailFB._addedBlocks);
    _waitingNot = '';
    transactionsdetailFB
            ._addedBlocks.needEndBlock![transactionsdetailFB._blockIndex] =
        transactionsdetailFB._addedBlocks.retVal;
    return transactionsdetailFB;
  }

  TransactionsdetailFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    transactionsdetailFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, transactionsdetailFB.parameters, param,
            SqlSyntax.LessThanOrEquals, transactionsdetailFB._addedBlocks)
        : setCriteria(pValue, transactionsdetailFB.parameters, param,
            SqlSyntax.GreaterThan, transactionsdetailFB._addedBlocks);
    _waitingNot = '';
    transactionsdetailFB
            ._addedBlocks.needEndBlock![transactionsdetailFB._blockIndex] =
        transactionsdetailFB._addedBlocks.retVal;
    return transactionsdetailFB;
  }

  TransactionsdetailFilterBuilder inValues(dynamic pValue) {
    transactionsdetailFB._addedBlocks = setCriteria(
        pValue,
        transactionsdetailFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        transactionsdetailFB._addedBlocks);
    _waitingNot = '';
    transactionsdetailFB
            ._addedBlocks.needEndBlock![transactionsdetailFB._blockIndex] =
        transactionsdetailFB._addedBlocks.retVal;
    return transactionsdetailFB;
  }
}
// endregion TransactionsdetailField

// region TransactionsdetailFilterBuilder
class TransactionsdetailFilterBuilder extends SearchCriteria {
  TransactionsdetailFilterBuilder(Transactionsdetail obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  Transactionsdetail? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  TransactionsdetailFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  TransactionsdetailFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  TransactionsdetailFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  TransactionsdetailFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  TransactionsdetailFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  TransactionsdetailFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  TransactionsdetailFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  TransactionsdetailFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  TransactionsdetailFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  TransactionsdetailFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  TransactionsdetailFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  TransactionsdetailField setField(
      TransactionsdetailField? field, String colName, DbType dbtype) {
    return TransactionsdetailField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  TransactionsdetailField? _id;
  TransactionsdetailField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  TransactionsdetailField? _item_id;
  TransactionsdetailField get item_id {
    return _item_id = setField(_item_id, 'item_id', DbType.integer);
  }

  TransactionsdetailField? _quantity;
  TransactionsdetailField get quantity {
    return _quantity = setField(_quantity, 'quantity', DbType.integer);
  }

  TransactionsdetailField? _price;
  TransactionsdetailField get price {
    return _price = setField(_price, 'price', DbType.text);
  }

  TransactionsdetailField? _created_at;
  TransactionsdetailField get created_at {
    return _created_at = setField(_created_at, 'created_at', DbType.date);
  }

  TransactionsdetailField? _isDeleted;
  TransactionsdetailField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Transactionsdetail._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Transactionsdetail> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);

    if (Transactionsdetail._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnTransactionsdetail
          .updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnTransactionsdetail.delete(qparams);
    }
    return r;
  }

  /// Recover List<Transactionsdetail> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Transactionsdetail bulk invoked');
    return _obj!._mnTransactionsdetail.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from transactionsdetails ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnTransactionsdetail.updateBatch(qparams, values);
  }

  /// This method always returns Transactionsdetail Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Transactionsdetail>
  Future<Transactionsdetail?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnTransactionsdetail.toList(qparams);
    final data = await objFuture;
    Transactionsdetail? obj;
    if (data.isNotEmpty) {
      obj = Transactionsdetail.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Transactionsdetail]
  ///
  /// <returns>int
  Future<int> toCount(
      [VoidCallback Function(int c)? transactionsdetailCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final transactionsdetailsFuture =
        await _obj!._mnTransactionsdetail.toList(qparams);
    final int count = transactionsdetailsFuture[0]['CNT'] as int;
    if (transactionsdetailCount != null) {
      transactionsdetailCount(count);
    }
    return count;
  }

  /// This method returns List<Transactionsdetail> [Transactionsdetail]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Transactionsdetail>
  Future<List<Transactionsdetail>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Transactionsdetail> transactionsdetailsData =
        await Transactionsdetail.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return transactionsdetailsData;
  }

  /// This method returns Json String [Transactionsdetail]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Transactionsdetail]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Transactionsdetail]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnTransactionsdetail.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Transactionsdetail>>
  Future<List<DropdownMenuItem<Transactionsdetail>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<Transactionsdetail>> o)?
          dropDownMenu]) async {
    _buildParameters();
    final transactionsdetailsFuture =
        _obj!._mnTransactionsdetail.toList(qparams);

    final data = await transactionsdetailsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Transactionsdetail>> items = []
      ..add(DropdownMenuItem(
        value: Transactionsdetail(),
        child: Text('Select Transactionsdetail'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Transactionsdetail.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)?
          dropDownMenu]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final transactionsdetailsFuture =
        _obj!._mnTransactionsdetail.toList(qparams);

    final data = await transactionsdetailsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Transactionsdetail'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Transactionsdetail]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM transactionsdetails WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnTransactionsdetail.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Transactionsdetail]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnTransactionsdetail.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Transactionsdetail.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnTransactionsdetail.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion TransactionsdetailFilterBuilder

// region TransactionsdetailFields
class TransactionsdetailFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fItem_id;
  static TableField get item_id {
    return _fItem_id =
        _fItem_id ?? SqlSyntax.setField(_fItem_id, 'item_id', DbType.integer);
  }

  static TableField? _fQuantity;
  static TableField get quantity {
    return _fQuantity = _fQuantity ??
        SqlSyntax.setField(_fQuantity, 'quantity', DbType.integer);
  }

  static TableField? _fPrice;
  static TableField get price {
    return _fPrice =
        _fPrice ?? SqlSyntax.setField(_fPrice, 'price', DbType.text);
  }

  static TableField? _fCreated_at;
  static TableField get created_at {
    return _fCreated_at = _fCreated_at ??
        SqlSyntax.setField(_fCreated_at, 'created_at', DbType.date);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion TransactionsdetailFields

//region TransactionsdetailManager
class TransactionsdetailManager extends SqfEntityProvider {
  TransactionsdetailManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'transactionsdetails';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion TransactionsdetailManager
// region Collection
class Collection {
  Collection(
      {this.id,
      this.amount,
      this.customer_id,
      this.created_at,
      this.isDeleted}) {
    _setDefaultValues();
  }
  Collection.withFields(
      this.id, this.amount, this.customer_id, this.created_at, this.isDeleted) {
    _setDefaultValues();
  }
  Collection.withId(
      this.id, this.amount, this.customer_id, this.created_at, this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Collection.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['amount'] != null) {
      amount = o['amount'].toString();
    }
    if (o['customer_id'] != null) {
      customer_id = int.tryParse(o['customer_id'].toString());
    }
    if (o['created_at'] != null) {
      created_at = int.tryParse(o['created_at'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['created_at'].toString())!)
          : DateTime.tryParse(o['created_at'].toString());
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    isSaved = true;
  }
  // FIELDS (Collection)
  int? id;
  String? amount;
  int? customer_id;
  DateTime? created_at;
  bool? isDeleted;
  bool? isSaved;
  BoolResult? saveResult;
  // end FIELDS (Collection)

  static const bool _softDeleteActivated = true;
  CollectionManager? __mnCollection;

  CollectionManager get _mnCollection {
    return __mnCollection = __mnCollection ?? CollectionManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (amount != null) {
      map['amount'] = amount;
    }

    if (customer_id != null) {
      map['customer_id'] = customer_id;
    }

    if (created_at != null) {
      map['created_at'] = forJson
          ? '$created_at!.year-$created_at!.month-$created_at!.day'
          : forQuery
              ? DateTime(created_at!.year, created_at!.month, created_at!.day)
                  .millisecondsSinceEpoch
              : created_at;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (amount != null) {
      map['amount'] = amount;
    }

    if (customer_id != null) {
      map['customer_id'] = customer_id;
    }

    if (created_at != null) {
      map['created_at'] = forJson
          ? '$created_at!.year-$created_at!.month-$created_at!.day'
          : forQuery
              ? DateTime(created_at!.year, created_at!.month, created_at!.day)
                  .millisecondsSinceEpoch
              : created_at;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Collection]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Collection]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      id,
      amount,
      customer_id,
      created_at != null ? created_at!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      id,
      amount,
      customer_id,
      created_at != null ? created_at!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  static Future<List<Collection>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Collection.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Collection>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Collection>[];
    try {
      objList = list
          .map((collection) =>
              Collection.fromMap(collection as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR Collection.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Collection>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Collection> objList = <Collection>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Collection.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Collection by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Collection if exist, otherwise returns null
  Future<Collection?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Collection? obj;
    final data = await _mnCollection.getById([id]);
    if (data.length != 0) {
      obj = Collection.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Collection) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnCollection.insert(this);
      if (saveResult!.success) {
        isSaved = true;
      }
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnCollection.update(this);
    }

    return id;
  }

  /// saveAll method saves the sent List<Collection> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Collection> collections) async {
    // final results = _mnCollection.saveAll('INSERT OR REPLACE INTO collections (id,amount, customer_id, created_at,isDeleted)  VALUES (?,?,?,?,?)',collections);
    // return results; removed in sqfentity_gen 1.3.0+6
    await MyDbModel().batchStart();
    for (final obj in collections) {
      await obj.save();
    }
    //    return MyDbModel().batchCommit();
    final result = await MyDbModel().batchCommit();

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int?> upsert() async {
    try {
      final result = await _mnCollection.rawInsert(
          'INSERT OR REPLACE INTO collections (id,amount, customer_id, created_at,isDeleted)  VALUES (?,?,?,?,?)',
          [
            id,
            amount,
            customer_id,
            created_at != null ? created_at!.millisecondsSinceEpoch : null,
            isDeleted
          ]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Collection id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Collection id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Collection Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Collection>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Collection> collections) async {
    final results = await _mnCollection.rawInsertAll(
        'INSERT OR REPLACE INTO collections (id,amount, customer_id, created_at,isDeleted)  VALUES (?,?,?,?,?)',
        collections);
    return results;
  }

  /// Deletes Collection

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Collection invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnCollection
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnCollection.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Collection>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Collection invoked (id=$id)');
    {
      return _mnCollection.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  CollectionFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return CollectionFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  CollectionFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return CollectionFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion collection

// region CollectionField
class CollectionField extends SearchCriteria {
  CollectionField(this.collectionFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  CollectionFilterBuilder collectionFB;

  CollectionField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  CollectionFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    collectionFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, collectionFB.parameters, param, SqlSyntax.EQuals,
            collectionFB._addedBlocks)
        : setCriteria(pValue, collectionFB.parameters, param,
            SqlSyntax.NotEQuals, collectionFB._addedBlocks);
    _waitingNot = '';
    collectionFB._addedBlocks.needEndBlock![collectionFB._blockIndex] =
        collectionFB._addedBlocks.retVal;
    return collectionFB;
  }

  CollectionFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    collectionFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, collectionFB.parameters, param,
            SqlSyntax.EQualsOrNull, collectionFB._addedBlocks)
        : setCriteria(pValue, collectionFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, collectionFB._addedBlocks);
    _waitingNot = '';
    collectionFB._addedBlocks.needEndBlock![collectionFB._blockIndex] =
        collectionFB._addedBlocks.retVal;
    return collectionFB;
  }

  CollectionFilterBuilder isNull() {
    collectionFB._addedBlocks = setCriteria(
        0,
        collectionFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        collectionFB._addedBlocks);
    _waitingNot = '';
    collectionFB._addedBlocks.needEndBlock![collectionFB._blockIndex] =
        collectionFB._addedBlocks.retVal;
    return collectionFB;
  }

  CollectionFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      collectionFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          collectionFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          collectionFB._addedBlocks);
      _waitingNot = '';
      collectionFB._addedBlocks.needEndBlock![collectionFB._blockIndex] =
          collectionFB._addedBlocks.retVal;
    }
    return collectionFB;
  }

  CollectionFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      collectionFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          collectionFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          collectionFB._addedBlocks);
      _waitingNot = '';
      collectionFB._addedBlocks.needEndBlock![collectionFB._blockIndex] =
          collectionFB._addedBlocks.retVal;
      collectionFB._addedBlocks.needEndBlock![collectionFB._blockIndex] =
          collectionFB._addedBlocks.retVal;
    }
    return collectionFB;
  }

  CollectionFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      collectionFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          collectionFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          collectionFB._addedBlocks);
      _waitingNot = '';
      collectionFB._addedBlocks.needEndBlock![collectionFB._blockIndex] =
          collectionFB._addedBlocks.retVal;
    }
    return collectionFB;
  }

  CollectionFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      collectionFB._addedBlocks = setCriteria(
          pFirst,
          collectionFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          collectionFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        collectionFB._addedBlocks = setCriteria(pFirst, collectionFB.parameters,
            param, SqlSyntax.LessThan, collectionFB._addedBlocks);
      } else {
        collectionFB._addedBlocks = setCriteria(pFirst, collectionFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, collectionFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        collectionFB._addedBlocks = setCriteria(pLast, collectionFB.parameters,
            param, SqlSyntax.GreaterThan, collectionFB._addedBlocks);
      } else {
        collectionFB._addedBlocks = setCriteria(pLast, collectionFB.parameters,
            param, SqlSyntax.LessThanOrEquals, collectionFB._addedBlocks);
      }
    }
    _waitingNot = '';
    collectionFB._addedBlocks.needEndBlock![collectionFB._blockIndex] =
        collectionFB._addedBlocks.retVal;
    return collectionFB;
  }

  CollectionFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    collectionFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, collectionFB.parameters, param,
            SqlSyntax.GreaterThan, collectionFB._addedBlocks)
        : setCriteria(pValue, collectionFB.parameters, param,
            SqlSyntax.LessThanOrEquals, collectionFB._addedBlocks);
    _waitingNot = '';
    collectionFB._addedBlocks.needEndBlock![collectionFB._blockIndex] =
        collectionFB._addedBlocks.retVal;
    return collectionFB;
  }

  CollectionFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    collectionFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, collectionFB.parameters, param,
            SqlSyntax.LessThan, collectionFB._addedBlocks)
        : setCriteria(pValue, collectionFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, collectionFB._addedBlocks);
    _waitingNot = '';
    collectionFB._addedBlocks.needEndBlock![collectionFB._blockIndex] =
        collectionFB._addedBlocks.retVal;
    return collectionFB;
  }

  CollectionFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    collectionFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, collectionFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, collectionFB._addedBlocks)
        : setCriteria(pValue, collectionFB.parameters, param,
            SqlSyntax.LessThan, collectionFB._addedBlocks);
    _waitingNot = '';
    collectionFB._addedBlocks.needEndBlock![collectionFB._blockIndex] =
        collectionFB._addedBlocks.retVal;
    return collectionFB;
  }

  CollectionFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    collectionFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, collectionFB.parameters, param,
            SqlSyntax.LessThanOrEquals, collectionFB._addedBlocks)
        : setCriteria(pValue, collectionFB.parameters, param,
            SqlSyntax.GreaterThan, collectionFB._addedBlocks);
    _waitingNot = '';
    collectionFB._addedBlocks.needEndBlock![collectionFB._blockIndex] =
        collectionFB._addedBlocks.retVal;
    return collectionFB;
  }

  CollectionFilterBuilder inValues(dynamic pValue) {
    collectionFB._addedBlocks = setCriteria(
        pValue,
        collectionFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        collectionFB._addedBlocks);
    _waitingNot = '';
    collectionFB._addedBlocks.needEndBlock![collectionFB._blockIndex] =
        collectionFB._addedBlocks.retVal;
    return collectionFB;
  }
}
// endregion CollectionField

// region CollectionFilterBuilder
class CollectionFilterBuilder extends SearchCriteria {
  CollectionFilterBuilder(Collection obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  Collection? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  CollectionFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  CollectionFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  CollectionFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  CollectionFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  CollectionFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  CollectionFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  CollectionFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  CollectionFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  CollectionFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  CollectionFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  CollectionFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  CollectionField setField(
      CollectionField? field, String colName, DbType dbtype) {
    return CollectionField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  CollectionField? _id;
  CollectionField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  CollectionField? _amount;
  CollectionField get amount {
    return _amount = setField(_amount, 'amount', DbType.text);
  }

  CollectionField? _customer_id;
  CollectionField get customer_id {
    return _customer_id = setField(_customer_id, 'customer_id', DbType.integer);
  }

  CollectionField? _created_at;
  CollectionField get created_at {
    return _created_at = setField(_created_at, 'created_at', DbType.date);
  }

  CollectionField? _isDeleted;
  CollectionField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Collection._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Collection> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);

    if (Collection._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnCollection.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnCollection.delete(qparams);
    }
    return r;
  }

  /// Recover List<Collection> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Collection bulk invoked');
    return _obj!._mnCollection.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from collections ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnCollection.updateBatch(qparams, values);
  }

  /// This method always returns Collection Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Collection>
  Future<Collection?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnCollection.toList(qparams);
    final data = await objFuture;
    Collection? obj;
    if (data.isNotEmpty) {
      obj = Collection.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Collection]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c)? collectionCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final collectionsFuture = await _obj!._mnCollection.toList(qparams);
    final int count = collectionsFuture[0]['CNT'] as int;
    if (collectionCount != null) {
      collectionCount(count);
    }
    return count;
  }

  /// This method returns List<Collection> [Collection]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Collection>
  Future<List<Collection>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Collection> collectionsData = await Collection.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return collectionsData;
  }

  /// This method returns Json String [Collection]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Collection]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Collection]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnCollection.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Collection>>
  Future<List<DropdownMenuItem<Collection>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<Collection>> o)?
          dropDownMenu]) async {
    _buildParameters();
    final collectionsFuture = _obj!._mnCollection.toList(qparams);

    final data = await collectionsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Collection>> items = []..add(DropdownMenuItem(
        value: Collection(),
        child: Text('Select Collection'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Collection.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)?
          dropDownMenu]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final collectionsFuture = _obj!._mnCollection.toList(qparams);

    final data = await collectionsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Collection'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Collection]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM collections WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnCollection.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Collection]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnCollection.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Collection.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnCollection.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion CollectionFilterBuilder

// region CollectionFields
class CollectionFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fAmount;
  static TableField get amount {
    return _fAmount =
        _fAmount ?? SqlSyntax.setField(_fAmount, 'amount', DbType.text);
  }

  static TableField? _fCustomer_id;
  static TableField get customer_id {
    return _fCustomer_id = _fCustomer_id ??
        SqlSyntax.setField(_fCustomer_id, 'customer_id', DbType.integer);
  }

  static TableField? _fCreated_at;
  static TableField get created_at {
    return _fCreated_at = _fCreated_at ??
        SqlSyntax.setField(_fCreated_at, 'created_at', DbType.date);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion CollectionFields

//region CollectionManager
class CollectionManager extends SqfEntityProvider {
  CollectionManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'collections';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion CollectionManager
// region Item
class Item {
  Item(
      {this.id,
      this.item_name,
      this.barcode,
      this.price1,
      this.price2,
      this.price3,
      this.created_at,
      this.isDeleted}) {
    _setDefaultValues();
  }
  Item.withFields(this.id, this.item_name, this.barcode, this.price1,
      this.price2, this.price3, this.created_at, this.isDeleted) {
    _setDefaultValues();
  }
  Item.withId(this.id, this.item_name, this.barcode, this.price1, this.price2,
      this.price3, this.created_at, this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Item.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['item_name'] != null) {
      item_name = o['item_name'].toString();
    }
    if (o['barcode'] != null) {
      barcode = o['barcode'].toString();
    }
    if (o['price1'] != null) {
      price1 = o['price1'].toString();
    }
    if (o['price2'] != null) {
      price2 = o['price2'].toString();
    }
    if (o['price3'] != null) {
      price3 = o['price3'].toString();
    }
    if (o['created_at'] != null) {
      created_at = int.tryParse(o['created_at'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['created_at'].toString())!)
          : DateTime.tryParse(o['created_at'].toString());
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    isSaved = true;
  }
  // FIELDS (Item)
  int? id;
  String? item_name;
  String? barcode;
  String? price1;
  String? price2;
  String? price3;
  DateTime? created_at;
  bool? isDeleted;
  bool? isSaved;
  BoolResult? saveResult;
  // end FIELDS (Item)

  static const bool _softDeleteActivated = true;
  ItemManager? __mnItem;

  ItemManager get _mnItem {
    return __mnItem = __mnItem ?? ItemManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (item_name != null) {
      map['item_name'] = item_name;
    }

    if (barcode != null) {
      map['barcode'] = barcode;
    }

    if (price1 != null) {
      map['price1'] = price1;
    }

    if (price2 != null) {
      map['price2'] = price2;
    }

    if (price3 != null) {
      map['price3'] = price3;
    }

    if (created_at != null) {
      map['created_at'] = forJson
          ? '$created_at!.year-$created_at!.month-$created_at!.day'
          : forQuery
              ? DateTime(created_at!.year, created_at!.month, created_at!.day)
                  .millisecondsSinceEpoch
              : created_at;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (item_name != null) {
      map['item_name'] = item_name;
    }

    if (barcode != null) {
      map['barcode'] = barcode;
    }

    if (price1 != null) {
      map['price1'] = price1;
    }

    if (price2 != null) {
      map['price2'] = price2;
    }

    if (price3 != null) {
      map['price3'] = price3;
    }

    if (created_at != null) {
      map['created_at'] = forJson
          ? '$created_at!.year-$created_at!.month-$created_at!.day'
          : forQuery
              ? DateTime(created_at!.year, created_at!.month, created_at!.day)
                  .millisecondsSinceEpoch
              : created_at;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Item]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Item]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      id,
      item_name,
      barcode,
      price1,
      price2,
      price3,
      created_at != null ? created_at!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      id,
      item_name,
      barcode,
      price1,
      price2,
      price3,
      created_at != null ? created_at!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  static Future<List<Item>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR Item.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Item>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Item>[];
    try {
      objList = list
          .map((item) => Item.fromMap(item as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Item.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Item>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Item> objList = <Item>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Item.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Item by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Item if exist, otherwise returns null
  Future<Item?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Item? obj;
    final data = await _mnItem.getById([id]);
    if (data.length != 0) {
      obj = Item.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Item) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnItem.insert(this);
      if (saveResult!.success) {
        isSaved = true;
      }
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnItem.update(this);
    }

    return id;
  }

  /// saveAll method saves the sent List<Item> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Item> items) async {
    // final results = _mnItem.saveAll('INSERT OR REPLACE INTO items (id,item_name, barcode, price1, price2, price3, created_at,isDeleted)  VALUES (?,?,?,?,?,?,?,?)',items);
    // return results; removed in sqfentity_gen 1.3.0+6
    await MyDbModel().batchStart();
    for (final obj in items) {
      await obj.save();
    }
    //    return MyDbModel().batchCommit();
    final result = await MyDbModel().batchCommit();

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int?> upsert() async {
    try {
      final result = await _mnItem.rawInsert(
          'INSERT OR REPLACE INTO items (id,item_name, barcode, price1, price2, price3, created_at,isDeleted)  VALUES (?,?,?,?,?,?,?,?)',
          [
            id,
            item_name,
            barcode,
            price1,
            price2,
            price3,
            created_at != null ? created_at!.millisecondsSinceEpoch : null,
            isDeleted
          ]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true, successMessage: 'Item id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Item id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Item Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Item>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Item> items) async {
    final results = await _mnItem.rawInsertAll(
        'INSERT OR REPLACE INTO items (id,item_name, barcode, price1, price2, price3, created_at,isDeleted)  VALUES (?,?,?,?,?,?,?,?)',
        items);
    return results;
  }

  /// Deletes Item

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Item invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnItem
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnItem.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Item>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Item invoked (id=$id)');
    {
      return _mnItem.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  ItemFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ItemFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  ItemFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ItemFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion item

// region ItemField
class ItemField extends SearchCriteria {
  ItemField(this.itemFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  ItemFilterBuilder itemFB;

  ItemField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  ItemFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    itemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, itemFB.parameters, param, SqlSyntax.EQuals,
            itemFB._addedBlocks)
        : setCriteria(pValue, itemFB.parameters, param, SqlSyntax.NotEQuals,
            itemFB._addedBlocks);
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }

  ItemFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    itemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, itemFB.parameters, param, SqlSyntax.EQualsOrNull,
            itemFB._addedBlocks)
        : setCriteria(pValue, itemFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, itemFB._addedBlocks);
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }

  ItemFilterBuilder isNull() {
    itemFB._addedBlocks = setCriteria(
        0,
        itemFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        itemFB._addedBlocks);
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }

  ItemFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      itemFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          itemFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          itemFB._addedBlocks);
      _waitingNot = '';
      itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
          itemFB._addedBlocks.retVal;
    }
    return itemFB;
  }

  ItemFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      itemFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          itemFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          itemFB._addedBlocks);
      _waitingNot = '';
      itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
          itemFB._addedBlocks.retVal;
      itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
          itemFB._addedBlocks.retVal;
    }
    return itemFB;
  }

  ItemFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      itemFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          itemFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          itemFB._addedBlocks);
      _waitingNot = '';
      itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
          itemFB._addedBlocks.retVal;
    }
    return itemFB;
  }

  ItemFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      itemFB._addedBlocks = setCriteria(
          pFirst,
          itemFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          itemFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        itemFB._addedBlocks = setCriteria(pFirst, itemFB.parameters, param,
            SqlSyntax.LessThan, itemFB._addedBlocks);
      } else {
        itemFB._addedBlocks = setCriteria(pFirst, itemFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, itemFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        itemFB._addedBlocks = setCriteria(pLast, itemFB.parameters, param,
            SqlSyntax.GreaterThan, itemFB._addedBlocks);
      } else {
        itemFB._addedBlocks = setCriteria(pLast, itemFB.parameters, param,
            SqlSyntax.LessThanOrEquals, itemFB._addedBlocks);
      }
    }
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }

  ItemFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    itemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, itemFB.parameters, param, SqlSyntax.GreaterThan,
            itemFB._addedBlocks)
        : setCriteria(pValue, itemFB.parameters, param,
            SqlSyntax.LessThanOrEquals, itemFB._addedBlocks);
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }

  ItemFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    itemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, itemFB.parameters, param, SqlSyntax.LessThan,
            itemFB._addedBlocks)
        : setCriteria(pValue, itemFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, itemFB._addedBlocks);
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }

  ItemFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    itemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, itemFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, itemFB._addedBlocks)
        : setCriteria(pValue, itemFB.parameters, param, SqlSyntax.LessThan,
            itemFB._addedBlocks);
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }

  ItemFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    itemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, itemFB.parameters, param,
            SqlSyntax.LessThanOrEquals, itemFB._addedBlocks)
        : setCriteria(pValue, itemFB.parameters, param, SqlSyntax.GreaterThan,
            itemFB._addedBlocks);
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }

  ItemFilterBuilder inValues(dynamic pValue) {
    itemFB._addedBlocks = setCriteria(
        pValue,
        itemFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        itemFB._addedBlocks);
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }
}
// endregion ItemField

// region ItemFilterBuilder
class ItemFilterBuilder extends SearchCriteria {
  ItemFilterBuilder(Item obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  Item? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  ItemFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  ItemFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  ItemFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  ItemFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  ItemFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  ItemFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  ItemFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ItemFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ItemFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ItemFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ItemFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  ItemField setField(ItemField? field, String colName, DbType dbtype) {
    return ItemField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  ItemField? _id;
  ItemField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  ItemField? _item_name;
  ItemField get item_name {
    return _item_name = setField(_item_name, 'item_name', DbType.text);
  }

  ItemField? _barcode;
  ItemField get barcode {
    return _barcode = setField(_barcode, 'barcode', DbType.text);
  }

  ItemField? _price1;
  ItemField get price1 {
    return _price1 = setField(_price1, 'price1', DbType.text);
  }

  ItemField? _price2;
  ItemField get price2 {
    return _price2 = setField(_price2, 'price2', DbType.text);
  }

  ItemField? _price3;
  ItemField get price3 {
    return _price3 = setField(_price3, 'price3', DbType.text);
  }

  ItemField? _created_at;
  ItemField get created_at {
    return _created_at = setField(_created_at, 'created_at', DbType.date);
  }

  ItemField? _isDeleted;
  ItemField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Item._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Item> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);

    if (Item._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnItem.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnItem.delete(qparams);
    }
    return r;
  }

  /// Recover List<Item> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Item bulk invoked');
    return _obj!._mnItem.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from items ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnItem.updateBatch(qparams, values);
  }

  /// This method always returns Item Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Item>
  Future<Item?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnItem.toList(qparams);
    final data = await objFuture;
    Item? obj;
    if (data.isNotEmpty) {
      obj = Item.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Item]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c)? itemCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final itemsFuture = await _obj!._mnItem.toList(qparams);
    final int count = itemsFuture[0]['CNT'] as int;
    if (itemCount != null) {
      itemCount(count);
    }
    return count;
  }

  /// This method returns List<Item> [Item]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Item>
  Future<List<Item>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Item> itemsData = await Item.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return itemsData;
  }

  /// This method returns Json String [Item]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Item]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Item]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnItem.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Item>>
  Future<List<DropdownMenuItem<Item>>> toDropDownMenu(String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<Item>> o)?
          dropDownMenu]) async {
    _buildParameters();
    final itemsFuture = _obj!._mnItem.toList(qparams);

    final data = await itemsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Item>> items = []..add(DropdownMenuItem(
        value: Item(),
        child: Text('Select Item'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Item.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)?
          dropDownMenu]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final itemsFuture = _obj!._mnItem.toList(qparams);

    final data = await itemsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Item'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Item]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM items WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnItem.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Item]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnItem.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Item.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnItem.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ItemFilterBuilder

// region ItemFields
class ItemFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fItem_name;
  static TableField get item_name {
    return _fItem_name = _fItem_name ??
        SqlSyntax.setField(_fItem_name, 'item_name', DbType.text);
  }

  static TableField? _fBarcode;
  static TableField get barcode {
    return _fBarcode =
        _fBarcode ?? SqlSyntax.setField(_fBarcode, 'barcode', DbType.text);
  }

  static TableField? _fPrice1;
  static TableField get price1 {
    return _fPrice1 =
        _fPrice1 ?? SqlSyntax.setField(_fPrice1, 'price1', DbType.text);
  }

  static TableField? _fPrice2;
  static TableField get price2 {
    return _fPrice2 =
        _fPrice2 ?? SqlSyntax.setField(_fPrice2, 'price2', DbType.text);
  }

  static TableField? _fPrice3;
  static TableField get price3 {
    return _fPrice3 =
        _fPrice3 ?? SqlSyntax.setField(_fPrice3, 'price3', DbType.text);
  }

  static TableField? _fCreated_at;
  static TableField get created_at {
    return _fCreated_at = _fCreated_at ??
        SqlSyntax.setField(_fCreated_at, 'created_at', DbType.date);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion ItemFields

//region ItemManager
class ItemManager extends SqfEntityProvider {
  ItemManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'items';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion ItemManager
// region Customer
class Customer {
  Customer(
      {this.id,
      this.customer_name,
      this.phone,
      this.address,
      this.created_at,
      this.isDeleted}) {
    _setDefaultValues();
  }
  Customer.withFields(this.id, this.customer_name, this.phone, this.address,
      this.created_at, this.isDeleted) {
    _setDefaultValues();
  }
  Customer.withId(this.id, this.customer_name, this.phone, this.address,
      this.created_at, this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Customer.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['customer_name'] != null) {
      customer_name = o['customer_name'].toString();
    }
    if (o['phone'] != null) {
      phone = o['phone'].toString();
    }
    if (o['address'] != null) {
      address = o['address'].toString();
    }
    if (o['created_at'] != null) {
      created_at = int.tryParse(o['created_at'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['created_at'].toString())!)
          : DateTime.tryParse(o['created_at'].toString());
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    isSaved = true;
  }
  // FIELDS (Customer)
  int? id;
  String? customer_name;
  String? phone;
  String? address;
  DateTime? created_at;
  bool? isDeleted;
  bool? isSaved;
  BoolResult? saveResult;
  // end FIELDS (Customer)

  static const bool _softDeleteActivated = true;
  CustomerManager? __mnCustomer;

  CustomerManager get _mnCustomer {
    return __mnCustomer = __mnCustomer ?? CustomerManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (customer_name != null) {
      map['customer_name'] = customer_name;
    }

    if (phone != null) {
      map['phone'] = phone;
    }

    if (address != null) {
      map['address'] = address;
    }

    if (created_at != null) {
      map['created_at'] = forJson
          ? '$created_at!.year-$created_at!.month-$created_at!.day'
          : forQuery
              ? DateTime(created_at!.year, created_at!.month, created_at!.day)
                  .millisecondsSinceEpoch
              : created_at;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (customer_name != null) {
      map['customer_name'] = customer_name;
    }

    if (phone != null) {
      map['phone'] = phone;
    }

    if (address != null) {
      map['address'] = address;
    }

    if (created_at != null) {
      map['created_at'] = forJson
          ? '$created_at!.year-$created_at!.month-$created_at!.day'
          : forQuery
              ? DateTime(created_at!.year, created_at!.month, created_at!.day)
                  .millisecondsSinceEpoch
              : created_at;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Customer]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Customer]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      id,
      customer_name,
      phone,
      address,
      created_at != null ? created_at!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      id,
      customer_name,
      phone,
      address,
      created_at != null ? created_at!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  static Future<List<Customer>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Customer.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Customer>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Customer>[];
    try {
      objList = list
          .map((customer) => Customer.fromMap(customer as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Customer.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Customer>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Customer> objList = <Customer>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Customer.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Customer by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Customer if exist, otherwise returns null
  Future<Customer?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Customer? obj;
    final data = await _mnCustomer.getById([id]);
    if (data.length != 0) {
      obj = Customer.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Customer) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnCustomer.insert(this);
      if (saveResult!.success) {
        isSaved = true;
      }
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnCustomer.update(this);
    }

    return id;
  }

  /// saveAll method saves the sent List<Customer> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Customer> customers) async {
    // final results = _mnCustomer.saveAll('INSERT OR REPLACE INTO customers (id,customer_name, phone, address, created_at,isDeleted)  VALUES (?,?,?,?,?,?)',customers);
    // return results; removed in sqfentity_gen 1.3.0+6
    await MyDbModel().batchStart();
    for (final obj in customers) {
      await obj.save();
    }
    //    return MyDbModel().batchCommit();
    final result = await MyDbModel().batchCommit();

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int?> upsert() async {
    try {
      final result = await _mnCustomer.rawInsert(
          'INSERT OR REPLACE INTO customers (id,customer_name, phone, address, created_at,isDeleted)  VALUES (?,?,?,?,?,?)',
          [
            id,
            customer_name,
            phone,
            address,
            created_at != null ? created_at!.millisecondsSinceEpoch : null,
            isDeleted
          ]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Customer id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Customer id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Customer Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Customer>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Customer> customers) async {
    final results = await _mnCustomer.rawInsertAll(
        'INSERT OR REPLACE INTO customers (id,customer_name, phone, address, created_at,isDeleted)  VALUES (?,?,?,?,?,?)',
        customers);
    return results;
  }

  /// Deletes Customer

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Customer invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnCustomer
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnCustomer.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Customer>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Customer invoked (id=$id)');
    {
      return _mnCustomer.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  CustomerFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return CustomerFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  CustomerFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return CustomerFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion customer

// region CustomerField
class CustomerField extends SearchCriteria {
  CustomerField(this.customerFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  CustomerFilterBuilder customerFB;

  CustomerField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  CustomerFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    customerFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, customerFB.parameters, param, SqlSyntax.EQuals,
            customerFB._addedBlocks)
        : setCriteria(pValue, customerFB.parameters, param, SqlSyntax.NotEQuals,
            customerFB._addedBlocks);
    _waitingNot = '';
    customerFB._addedBlocks.needEndBlock![customerFB._blockIndex] =
        customerFB._addedBlocks.retVal;
    return customerFB;
  }

  CustomerFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    customerFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, customerFB.parameters, param,
            SqlSyntax.EQualsOrNull, customerFB._addedBlocks)
        : setCriteria(pValue, customerFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, customerFB._addedBlocks);
    _waitingNot = '';
    customerFB._addedBlocks.needEndBlock![customerFB._blockIndex] =
        customerFB._addedBlocks.retVal;
    return customerFB;
  }

  CustomerFilterBuilder isNull() {
    customerFB._addedBlocks = setCriteria(
        0,
        customerFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        customerFB._addedBlocks);
    _waitingNot = '';
    customerFB._addedBlocks.needEndBlock![customerFB._blockIndex] =
        customerFB._addedBlocks.retVal;
    return customerFB;
  }

  CustomerFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      customerFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          customerFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          customerFB._addedBlocks);
      _waitingNot = '';
      customerFB._addedBlocks.needEndBlock![customerFB._blockIndex] =
          customerFB._addedBlocks.retVal;
    }
    return customerFB;
  }

  CustomerFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      customerFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          customerFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          customerFB._addedBlocks);
      _waitingNot = '';
      customerFB._addedBlocks.needEndBlock![customerFB._blockIndex] =
          customerFB._addedBlocks.retVal;
      customerFB._addedBlocks.needEndBlock![customerFB._blockIndex] =
          customerFB._addedBlocks.retVal;
    }
    return customerFB;
  }

  CustomerFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      customerFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          customerFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          customerFB._addedBlocks);
      _waitingNot = '';
      customerFB._addedBlocks.needEndBlock![customerFB._blockIndex] =
          customerFB._addedBlocks.retVal;
    }
    return customerFB;
  }

  CustomerFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      customerFB._addedBlocks = setCriteria(
          pFirst,
          customerFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          customerFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        customerFB._addedBlocks = setCriteria(pFirst, customerFB.parameters,
            param, SqlSyntax.LessThan, customerFB._addedBlocks);
      } else {
        customerFB._addedBlocks = setCriteria(pFirst, customerFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, customerFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        customerFB._addedBlocks = setCriteria(pLast, customerFB.parameters,
            param, SqlSyntax.GreaterThan, customerFB._addedBlocks);
      } else {
        customerFB._addedBlocks = setCriteria(pLast, customerFB.parameters,
            param, SqlSyntax.LessThanOrEquals, customerFB._addedBlocks);
      }
    }
    _waitingNot = '';
    customerFB._addedBlocks.needEndBlock![customerFB._blockIndex] =
        customerFB._addedBlocks.retVal;
    return customerFB;
  }

  CustomerFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    customerFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, customerFB.parameters, param,
            SqlSyntax.GreaterThan, customerFB._addedBlocks)
        : setCriteria(pValue, customerFB.parameters, param,
            SqlSyntax.LessThanOrEquals, customerFB._addedBlocks);
    _waitingNot = '';
    customerFB._addedBlocks.needEndBlock![customerFB._blockIndex] =
        customerFB._addedBlocks.retVal;
    return customerFB;
  }

  CustomerFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    customerFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, customerFB.parameters, param, SqlSyntax.LessThan,
            customerFB._addedBlocks)
        : setCriteria(pValue, customerFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, customerFB._addedBlocks);
    _waitingNot = '';
    customerFB._addedBlocks.needEndBlock![customerFB._blockIndex] =
        customerFB._addedBlocks.retVal;
    return customerFB;
  }

  CustomerFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    customerFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, customerFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, customerFB._addedBlocks)
        : setCriteria(pValue, customerFB.parameters, param, SqlSyntax.LessThan,
            customerFB._addedBlocks);
    _waitingNot = '';
    customerFB._addedBlocks.needEndBlock![customerFB._blockIndex] =
        customerFB._addedBlocks.retVal;
    return customerFB;
  }

  CustomerFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    customerFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, customerFB.parameters, param,
            SqlSyntax.LessThanOrEquals, customerFB._addedBlocks)
        : setCriteria(pValue, customerFB.parameters, param,
            SqlSyntax.GreaterThan, customerFB._addedBlocks);
    _waitingNot = '';
    customerFB._addedBlocks.needEndBlock![customerFB._blockIndex] =
        customerFB._addedBlocks.retVal;
    return customerFB;
  }

  CustomerFilterBuilder inValues(dynamic pValue) {
    customerFB._addedBlocks = setCriteria(
        pValue,
        customerFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        customerFB._addedBlocks);
    _waitingNot = '';
    customerFB._addedBlocks.needEndBlock![customerFB._blockIndex] =
        customerFB._addedBlocks.retVal;
    return customerFB;
  }
}
// endregion CustomerField

// region CustomerFilterBuilder
class CustomerFilterBuilder extends SearchCriteria {
  CustomerFilterBuilder(Customer obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  Customer? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  CustomerFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  CustomerFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  CustomerFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  CustomerFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  CustomerFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  CustomerFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  CustomerFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  CustomerFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  CustomerFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  CustomerFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  CustomerFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  CustomerField setField(CustomerField? field, String colName, DbType dbtype) {
    return CustomerField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  CustomerField? _id;
  CustomerField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  CustomerField? _customer_name;
  CustomerField get customer_name {
    return _customer_name =
        setField(_customer_name, 'customer_name', DbType.text);
  }

  CustomerField? _phone;
  CustomerField get phone {
    return _phone = setField(_phone, 'phone', DbType.text);
  }

  CustomerField? _address;
  CustomerField get address {
    return _address = setField(_address, 'address', DbType.text);
  }

  CustomerField? _created_at;
  CustomerField get created_at {
    return _created_at = setField(_created_at, 'created_at', DbType.date);
  }

  CustomerField? _isDeleted;
  CustomerField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Customer._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Customer> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);

    if (Customer._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnCustomer.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnCustomer.delete(qparams);
    }
    return r;
  }

  /// Recover List<Customer> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Customer bulk invoked');
    return _obj!._mnCustomer.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from customers ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnCustomer.updateBatch(qparams, values);
  }

  /// This method always returns Customer Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Customer>
  Future<Customer?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnCustomer.toList(qparams);
    final data = await objFuture;
    Customer? obj;
    if (data.isNotEmpty) {
      obj = Customer.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Customer]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c)? customerCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final customersFuture = await _obj!._mnCustomer.toList(qparams);
    final int count = customersFuture[0]['CNT'] as int;
    if (customerCount != null) {
      customerCount(count);
    }
    return count;
  }

  /// This method returns List<Customer> [Customer]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Customer>
  Future<List<Customer>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Customer> customersData = await Customer.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return customersData;
  }

  /// This method returns Json String [Customer]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Customer]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Customer]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnCustomer.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Customer>>
  Future<List<DropdownMenuItem<Customer>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<Customer>> o)?
          dropDownMenu]) async {
    _buildParameters();
    final customersFuture = _obj!._mnCustomer.toList(qparams);

    final data = await customersFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Customer>> items = []..add(DropdownMenuItem(
        value: Customer(),
        child: Text('Select Customer'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Customer.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)?
          dropDownMenu]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final customersFuture = _obj!._mnCustomer.toList(qparams);

    final data = await customersFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Customer'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Customer]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM customers WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnCustomer.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Customer]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnCustomer.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Customer.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnCustomer.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion CustomerFilterBuilder

// region CustomerFields
class CustomerFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fCustomer_name;
  static TableField get customer_name {
    return _fCustomer_name = _fCustomer_name ??
        SqlSyntax.setField(_fCustomer_name, 'customer_name', DbType.text);
  }

  static TableField? _fPhone;
  static TableField get phone {
    return _fPhone =
        _fPhone ?? SqlSyntax.setField(_fPhone, 'phone', DbType.text);
  }

  static TableField? _fAddress;
  static TableField get address {
    return _fAddress =
        _fAddress ?? SqlSyntax.setField(_fAddress, 'address', DbType.text);
  }

  static TableField? _fCreated_at;
  static TableField get created_at {
    return _fCreated_at = _fCreated_at ??
        SqlSyntax.setField(_fCreated_at, 'created_at', DbType.date);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion CustomerFields

//region CustomerManager
class CustomerManager extends SqfEntityProvider {
  CustomerManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'customers';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion CustomerManager
// region Itemsimage
class Itemsimage {
  Itemsimage({this.id, this.item_id, this.image, this.isDeleted}) {
    _setDefaultValues();
  }
  Itemsimage.withFields(this.id, this.item_id, this.image, this.isDeleted) {
    _setDefaultValues();
  }
  Itemsimage.withId(this.id, this.item_id, this.image, this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Itemsimage.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['item_id'] != null) {
      item_id = int.tryParse(o['item_id'].toString());
    }
    if (o['image'] != null) {
      image = o['image'].toString();
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    isSaved = true;
  }
  // FIELDS (Itemsimage)
  int? id;
  int? item_id;
  String? image;
  bool? isDeleted;
  bool? isSaved;
  BoolResult? saveResult;
  // end FIELDS (Itemsimage)

  static const bool _softDeleteActivated = true;
  ItemsimageManager? __mnItemsimage;

  ItemsimageManager get _mnItemsimage {
    return __mnItemsimage = __mnItemsimage ?? ItemsimageManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (item_id != null) {
      map['item_id'] = item_id;
    }

    if (image != null) {
      map['image'] = image;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (item_id != null) {
      map['item_id'] = item_id;
    }

    if (image != null) {
      map['image'] = image;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Itemsimage]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Itemsimage]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [id, item_id, image, isDeleted];
  }

  List<dynamic> toArgsWithIds() {
    return [id, item_id, image, isDeleted];
  }

  static Future<List<Itemsimage>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Itemsimage.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Itemsimage>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Itemsimage>[];
    try {
      objList = list
          .map((itemsimage) =>
              Itemsimage.fromMap(itemsimage as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR Itemsimage.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Itemsimage>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Itemsimage> objList = <Itemsimage>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Itemsimage.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Itemsimage by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Itemsimage if exist, otherwise returns null
  Future<Itemsimage?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Itemsimage? obj;
    final data = await _mnItemsimage.getById([id]);
    if (data.length != 0) {
      obj = Itemsimage.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Itemsimage) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnItemsimage.insert(this);
      if (saveResult!.success) {
        isSaved = true;
      }
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnItemsimage.update(this);
    }

    return id;
  }

  /// saveAll method saves the sent List<Itemsimage> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Itemsimage> itemsimages) async {
    // final results = _mnItemsimage.saveAll('INSERT OR REPLACE INTO itemsimages (id,item_id, image,isDeleted)  VALUES (?,?,?,?)',itemsimages);
    // return results; removed in sqfentity_gen 1.3.0+6
    await MyDbModel().batchStart();
    for (final obj in itemsimages) {
      await obj.save();
    }
    //    return MyDbModel().batchCommit();
    final result = await MyDbModel().batchCommit();

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int?> upsert() async {
    try {
      final result = await _mnItemsimage.rawInsert(
          'INSERT OR REPLACE INTO itemsimages (id,item_id, image,isDeleted)  VALUES (?,?,?,?)',
          [id, item_id, image, isDeleted]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Itemsimage id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Itemsimage id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Itemsimage Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Itemsimage>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Itemsimage> itemsimages) async {
    final results = await _mnItemsimage.rawInsertAll(
        'INSERT OR REPLACE INTO itemsimages (id,item_id, image,isDeleted)  VALUES (?,?,?,?)',
        itemsimages);
    return results;
  }

  /// Deletes Itemsimage

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Itemsimage invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnItemsimage
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnItemsimage.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Itemsimage>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Itemsimage invoked (id=$id)');
    {
      return _mnItemsimage.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  ItemsimageFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ItemsimageFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  ItemsimageFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ItemsimageFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion itemsimage

// region ItemsimageField
class ItemsimageField extends SearchCriteria {
  ItemsimageField(this.itemsimageFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  ItemsimageFilterBuilder itemsimageFB;

  ItemsimageField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  ItemsimageFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    itemsimageFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, itemsimageFB.parameters, param, SqlSyntax.EQuals,
            itemsimageFB._addedBlocks)
        : setCriteria(pValue, itemsimageFB.parameters, param,
            SqlSyntax.NotEQuals, itemsimageFB._addedBlocks);
    _waitingNot = '';
    itemsimageFB._addedBlocks.needEndBlock![itemsimageFB._blockIndex] =
        itemsimageFB._addedBlocks.retVal;
    return itemsimageFB;
  }

  ItemsimageFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    itemsimageFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, itemsimageFB.parameters, param,
            SqlSyntax.EQualsOrNull, itemsimageFB._addedBlocks)
        : setCriteria(pValue, itemsimageFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, itemsimageFB._addedBlocks);
    _waitingNot = '';
    itemsimageFB._addedBlocks.needEndBlock![itemsimageFB._blockIndex] =
        itemsimageFB._addedBlocks.retVal;
    return itemsimageFB;
  }

  ItemsimageFilterBuilder isNull() {
    itemsimageFB._addedBlocks = setCriteria(
        0,
        itemsimageFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        itemsimageFB._addedBlocks);
    _waitingNot = '';
    itemsimageFB._addedBlocks.needEndBlock![itemsimageFB._blockIndex] =
        itemsimageFB._addedBlocks.retVal;
    return itemsimageFB;
  }

  ItemsimageFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      itemsimageFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          itemsimageFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          itemsimageFB._addedBlocks);
      _waitingNot = '';
      itemsimageFB._addedBlocks.needEndBlock![itemsimageFB._blockIndex] =
          itemsimageFB._addedBlocks.retVal;
    }
    return itemsimageFB;
  }

  ItemsimageFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      itemsimageFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          itemsimageFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          itemsimageFB._addedBlocks);
      _waitingNot = '';
      itemsimageFB._addedBlocks.needEndBlock![itemsimageFB._blockIndex] =
          itemsimageFB._addedBlocks.retVal;
      itemsimageFB._addedBlocks.needEndBlock![itemsimageFB._blockIndex] =
          itemsimageFB._addedBlocks.retVal;
    }
    return itemsimageFB;
  }

  ItemsimageFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      itemsimageFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          itemsimageFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          itemsimageFB._addedBlocks);
      _waitingNot = '';
      itemsimageFB._addedBlocks.needEndBlock![itemsimageFB._blockIndex] =
          itemsimageFB._addedBlocks.retVal;
    }
    return itemsimageFB;
  }

  ItemsimageFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      itemsimageFB._addedBlocks = setCriteria(
          pFirst,
          itemsimageFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          itemsimageFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        itemsimageFB._addedBlocks = setCriteria(pFirst, itemsimageFB.parameters,
            param, SqlSyntax.LessThan, itemsimageFB._addedBlocks);
      } else {
        itemsimageFB._addedBlocks = setCriteria(pFirst, itemsimageFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, itemsimageFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        itemsimageFB._addedBlocks = setCriteria(pLast, itemsimageFB.parameters,
            param, SqlSyntax.GreaterThan, itemsimageFB._addedBlocks);
      } else {
        itemsimageFB._addedBlocks = setCriteria(pLast, itemsimageFB.parameters,
            param, SqlSyntax.LessThanOrEquals, itemsimageFB._addedBlocks);
      }
    }
    _waitingNot = '';
    itemsimageFB._addedBlocks.needEndBlock![itemsimageFB._blockIndex] =
        itemsimageFB._addedBlocks.retVal;
    return itemsimageFB;
  }

  ItemsimageFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    itemsimageFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, itemsimageFB.parameters, param,
            SqlSyntax.GreaterThan, itemsimageFB._addedBlocks)
        : setCriteria(pValue, itemsimageFB.parameters, param,
            SqlSyntax.LessThanOrEquals, itemsimageFB._addedBlocks);
    _waitingNot = '';
    itemsimageFB._addedBlocks.needEndBlock![itemsimageFB._blockIndex] =
        itemsimageFB._addedBlocks.retVal;
    return itemsimageFB;
  }

  ItemsimageFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    itemsimageFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, itemsimageFB.parameters, param,
            SqlSyntax.LessThan, itemsimageFB._addedBlocks)
        : setCriteria(pValue, itemsimageFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, itemsimageFB._addedBlocks);
    _waitingNot = '';
    itemsimageFB._addedBlocks.needEndBlock![itemsimageFB._blockIndex] =
        itemsimageFB._addedBlocks.retVal;
    return itemsimageFB;
  }

  ItemsimageFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    itemsimageFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, itemsimageFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, itemsimageFB._addedBlocks)
        : setCriteria(pValue, itemsimageFB.parameters, param,
            SqlSyntax.LessThan, itemsimageFB._addedBlocks);
    _waitingNot = '';
    itemsimageFB._addedBlocks.needEndBlock![itemsimageFB._blockIndex] =
        itemsimageFB._addedBlocks.retVal;
    return itemsimageFB;
  }

  ItemsimageFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    itemsimageFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, itemsimageFB.parameters, param,
            SqlSyntax.LessThanOrEquals, itemsimageFB._addedBlocks)
        : setCriteria(pValue, itemsimageFB.parameters, param,
            SqlSyntax.GreaterThan, itemsimageFB._addedBlocks);
    _waitingNot = '';
    itemsimageFB._addedBlocks.needEndBlock![itemsimageFB._blockIndex] =
        itemsimageFB._addedBlocks.retVal;
    return itemsimageFB;
  }

  ItemsimageFilterBuilder inValues(dynamic pValue) {
    itemsimageFB._addedBlocks = setCriteria(
        pValue,
        itemsimageFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        itemsimageFB._addedBlocks);
    _waitingNot = '';
    itemsimageFB._addedBlocks.needEndBlock![itemsimageFB._blockIndex] =
        itemsimageFB._addedBlocks.retVal;
    return itemsimageFB;
  }
}
// endregion ItemsimageField

// region ItemsimageFilterBuilder
class ItemsimageFilterBuilder extends SearchCriteria {
  ItemsimageFilterBuilder(Itemsimage obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  Itemsimage? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  ItemsimageFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  ItemsimageFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  ItemsimageFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  ItemsimageFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  ItemsimageFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  ItemsimageFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  ItemsimageFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ItemsimageFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ItemsimageFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ItemsimageFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ItemsimageFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  ItemsimageField setField(
      ItemsimageField? field, String colName, DbType dbtype) {
    return ItemsimageField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  ItemsimageField? _id;
  ItemsimageField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  ItemsimageField? _item_id;
  ItemsimageField get item_id {
    return _item_id = setField(_item_id, 'item_id', DbType.integer);
  }

  ItemsimageField? _image;
  ItemsimageField get image {
    return _image = setField(_image, 'image', DbType.text);
  }

  ItemsimageField? _isDeleted;
  ItemsimageField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Itemsimage._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Itemsimage> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);

    if (Itemsimage._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnItemsimage.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnItemsimage.delete(qparams);
    }
    return r;
  }

  /// Recover List<Itemsimage> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Itemsimage bulk invoked');
    return _obj!._mnItemsimage.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from itemsimages ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnItemsimage.updateBatch(qparams, values);
  }

  /// This method always returns Itemsimage Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Itemsimage>
  Future<Itemsimage?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnItemsimage.toList(qparams);
    final data = await objFuture;
    Itemsimage? obj;
    if (data.isNotEmpty) {
      obj = Itemsimage.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Itemsimage]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c)? itemsimageCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final itemsimagesFuture = await _obj!._mnItemsimage.toList(qparams);
    final int count = itemsimagesFuture[0]['CNT'] as int;
    if (itemsimageCount != null) {
      itemsimageCount(count);
    }
    return count;
  }

  /// This method returns List<Itemsimage> [Itemsimage]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Itemsimage>
  Future<List<Itemsimage>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Itemsimage> itemsimagesData = await Itemsimage.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return itemsimagesData;
  }

  /// This method returns Json String [Itemsimage]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Itemsimage]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Itemsimage]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnItemsimage.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Itemsimage>>
  Future<List<DropdownMenuItem<Itemsimage>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<Itemsimage>> o)?
          dropDownMenu]) async {
    _buildParameters();
    final itemsimagesFuture = _obj!._mnItemsimage.toList(qparams);

    final data = await itemsimagesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Itemsimage>> items = []..add(DropdownMenuItem(
        value: Itemsimage(),
        child: Text('Select Itemsimage'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Itemsimage.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)?
          dropDownMenu]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final itemsimagesFuture = _obj!._mnItemsimage.toList(qparams);

    final data = await itemsimagesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Itemsimage'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Itemsimage]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM itemsimages WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnItemsimage.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Itemsimage]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnItemsimage.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Itemsimage.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnItemsimage.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ItemsimageFilterBuilder

// region ItemsimageFields
class ItemsimageFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fItem_id;
  static TableField get item_id {
    return _fItem_id =
        _fItem_id ?? SqlSyntax.setField(_fItem_id, 'item_id', DbType.integer);
  }

  static TableField? _fImage;
  static TableField get image {
    return _fImage =
        _fImage ?? SqlSyntax.setField(_fImage, 'image', DbType.text);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion ItemsimageFields

//region ItemsimageManager
class ItemsimageManager extends SqfEntityProvider {
  ItemsimageManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'itemsimages';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion ItemsimageManager
class MyDbModelSequenceManager extends SqfEntityProvider {
  MyDbModelSequenceManager() : super(MyDbModel());
}
// END OF ENTITIES

// BEGIN CONTROLLERS
// BEGIN CONTROLLER (User)

class UserController extends User {
  String formListTitleField = 'email';
  String formListSubTitleField = 'name';
  static SQFViewList getController = SQFViewList(
    UserController(),
    primaryKeyName: 'id',
    useSoftDeleting: true,
  );
  Map<String, String> subMenu() {
    final menu = <String, String>{};

    return menu;
  }

  Future<Widget> gotoEdit(dynamic obj) async {
    return UserAdd(obj == null
        ? User()
        : await User().getById(obj['id'] as int) ?? User());
  }
}
// END CONTROLLER (User)

// BEGIN CONTROLLER (Transaction)

class TransactionController extends Transaction {
  String formListTitleField = 'transaction_type';
  String formListSubTitleField = 'phone';
  static SQFViewList getController = SQFViewList(
    TransactionController(),
    primaryKeyName: 'id',
    useSoftDeleting: true,
  );
  Map<String, String> subMenu() {
    final menu = <String, String>{};

    return menu;
  }

  Future<Widget> gotoEdit(dynamic obj) async {
    return TransactionAdd(obj == null
        ? Transaction()
        : await Transaction().getById(obj['id'] as int) ?? Transaction());
  }
}
// END CONTROLLER (Transaction)

// BEGIN CONTROLLER (Transactionsdetail)

class TransactionsdetailController extends Transactionsdetail {
  String formListTitleField = 'price';
  String formListSubTitleField = 'item_id';
  static SQFViewList getController = SQFViewList(
    TransactionsdetailController(),
    primaryKeyName: 'id',
    useSoftDeleting: true,
  );
  Map<String, String> subMenu() {
    final menu = <String, String>{};

    return menu;
  }

  Future<Widget> gotoEdit(dynamic obj) async {
    return TransactionsdetailAdd(obj == null
        ? Transactionsdetail()
        : await Transactionsdetail().getById(obj['id'] as int) ??
            Transactionsdetail());
  }
}
// END CONTROLLER (Transactionsdetail)

// BEGIN CONTROLLER (Collection)

class CollectionController extends Collection {
  String formListTitleField = 'amount';
  String formListSubTitleField = 'customer_id';
  static SQFViewList getController = SQFViewList(
    CollectionController(),
    primaryKeyName: 'id',
    useSoftDeleting: true,
  );
  Map<String, String> subMenu() {
    final menu = <String, String>{};

    return menu;
  }

  Future<Widget> gotoEdit(dynamic obj) async {
    return CollectionAdd(obj == null
        ? Collection()
        : await Collection().getById(obj['id'] as int) ?? Collection());
  }
}
// END CONTROLLER (Collection)

// BEGIN CONTROLLER (Item)

class ItemController extends Item {
  String formListTitleField = 'item_name';
  String formListSubTitleField = 'barcode';
  static SQFViewList getController = SQFViewList(
    ItemController(),
    primaryKeyName: 'id',
    useSoftDeleting: true,
  );
  Map<String, String> subMenu() {
    final menu = <String, String>{};

    return menu;
  }

  Future<Widget> gotoEdit(dynamic obj) async {
    return ItemAdd(obj == null
        ? Item()
        : await Item().getById(obj['id'] as int) ?? Item());
  }
}
// END CONTROLLER (Item)

// BEGIN CONTROLLER (Customer)

class CustomerController extends Customer {
  String formListTitleField = 'customer_name';
  String formListSubTitleField = 'phone';
  static SQFViewList getController = SQFViewList(
    CustomerController(),
    primaryKeyName: 'id',
    useSoftDeleting: true,
  );
  Map<String, String> subMenu() {
    final menu = <String, String>{};

    return menu;
  }

  Future<Widget> gotoEdit(dynamic obj) async {
    return CustomerAdd(obj == null
        ? Customer()
        : await Customer().getById(obj['id'] as int) ?? Customer());
  }
}
// END CONTROLLER (Customer)

// BEGIN CONTROLLER (Itemsimage)

class ItemsimageController extends Itemsimage {
  String formListTitleField = 'image';
  String formListSubTitleField = 'item_id';
  static SQFViewList getController = SQFViewList(
    ItemsimageController(),
    primaryKeyName: 'id',
    useSoftDeleting: true,
  );
  Map<String, String> subMenu() {
    final menu = <String, String>{};

    return menu;
  }

  Future<Widget> gotoEdit(dynamic obj) async {
    return ItemsimageAdd(obj == null
        ? Itemsimage()
        : await Itemsimage().getById(obj['id'] as int) ?? Itemsimage());
  }
}
// END CONTROLLER (Itemsimage)

// END OF CONTROLLERS
